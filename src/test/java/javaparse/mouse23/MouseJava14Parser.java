//=========================================================================
//
//  This file was generated by Mouse 2.3 at 2021-06-29 05:59:56 GMT
//  from grammar '/tmp/Mouse-2.3/java.peg'.
//
//=========================================================================

package javaparse.mouse23;

import mouse.runtime.FuncVV;
import mouse.runtime.Source;

public class MouseJava14Parser extends mouse.runtime.ParserMemo
{
  //=======================================================================
  //
  //  Initialization
  //
  //=======================================================================
  //-------------------------------------------------------------------
  //  Constructor
  //-------------------------------------------------------------------
  public MouseJava14Parser()
    {
      sem = null;
      super.sem = sem;
      caches = cacheList;
    }

  //-------------------------------------------------------------------
  //  Run the parser
  //-------------------------------------------------------------------
  public boolean parse(Source src)
    {
      super.init(src);
      boolean result = Compilation();
      closeParser(result);
      return result;
    }

  //=======================================================================
  //
  //  Parsing procedures
  //
  //=======================================================================
  //=====================================================================
  //  Compilation = Spacing CompilationUnit SUB? EOT ;
  //=====================================================================
  boolean Compilation()
    {
      if (saved("Compilation",Compilation)) return reuse();
      Spacing();
      CompilationUnit();
      SUB();
      if (!EOT()) return reject();
      return accept();
    }

  Cache Compilation = new Cache();

  //=====================================================================
  //  SUB = "\u001a" ;
  //=====================================================================
  boolean SUB()
    {
      if (saved("SUB",SUB)) return reuse();
      if (!next('\u001a')) return reject();
      return accept();
    }

  Cache SUB = new Cache();

  //=====================================================================
  //  EOT = !_ ;
  //=====================================================================
  boolean EOT()
    {
      if (saved("EOT",EOT)) return reuse();
      if (!aheadNot()) return reject();
      return accept();
    }

  Cache EOT = new Cache();

  //=====================================================================
  //  Spacing = ([ \t\r\n\f]+ / "/*" _*+ "*/" / "//" _*+ [\r\n])* ;
  //=====================================================================
  boolean Spacing()
    {
      if (saved("Spacing",Spacing)) return reuse();
      while (Spacing_1());
      return accept();
    }

  Cache Spacing = new Cache();

  //-------------------------------------------------------------------
  //  Spacing_1 = [ \t\r\n\f]+ / "/*" _*+ "*/" / "//" _*+ [\r\n]
  //-------------------------------------------------------------------
  boolean Spacing_1()
    {
      if (saved("Spacing_1",Spacing_1)) return reuseInner();
      if (Spacing_2() || Spacing_4() || Spacing_9()) return acceptInner();
      return rejectInner();
    }

  Cache Spacing_1 = new Cache();

  //-------------------------------------------------------------------
  //  Spacing_2 = [ \t\r\n\f]+
  //-------------------------------------------------------------------
  boolean Spacing_2()
    {
      if (saved("Spacing_2",Spacing_2)) return reuseInner();
      if (!nextIn(" \t\r\n\f")) return rejectInner();
      while (nextIn(" \t\r\n\f"));
      return acceptInner();
    }

  Cache Spacing_2 = new Cache();

  //-------------------------------------------------------------------
  //  Spacing_4 = "/*" _*+ "*/"
  //-------------------------------------------------------------------
  boolean Spacing_4()
    {
      if (saved("Spacing_4",Spacing_4)) return reuseInner();
      if (!next("/*")) return rejectInner();
      while (!next("*/"))
        if (!next()) return rejectInner();
      return acceptInner();
    }

  Cache Spacing_4 = new Cache();

  //-------------------------------------------------------------------
  //  Spacing_9 = "//" _*+ [\r\n]
  //-------------------------------------------------------------------
  boolean Spacing_9()
    {
      if (saved("Spacing_9",Spacing_9)) return reuseInner();
      if (!next("//")) return rejectInner();
      while (!nextIn("\r\n"))
        if (!next()) return rejectInner();
      return acceptInner();
    }

  Cache Spacing_9 = new Cache();

  //=====================================================================
  //  Word = Letter LetterOrDigit* ;
  //=====================================================================
  boolean Word()
    {
      if (saved("Word",Word)) return reuse();
      if (!Letter()) return reject();
      while (LetterOrDigit());
      return accept();
    }

  Cache Word = new Cache();

  //=====================================================================
  //  Identifier = Word:!Reserved Spacing ;
  //=====================================================================
  boolean Identifier()
    {
      if (saved("Identifier",Identifier)) return reuse();
      if (!is(false,()->Word(),()->Reserved())) return reject();
      Spacing();
      return accept();
    }

  Cache Identifier = new Cache();

  //=====================================================================
  //  TypeIdentifier = Word:!(Reserved / "var" / "yield") Spacing ;
  //=====================================================================
  boolean TypeIdentifier()
    {
      if (saved("TypeIdentifier",TypeIdentifier)) return reuse();
      if (!is(false,()->Word(),()->TypeIdentifier_2())) return reject();
      Spacing();
      return accept();
    }

  Cache TypeIdentifier = new Cache();

  //-------------------------------------------------------------------
  //  TypeIdentifier_2 = Reserved / "var" / "yield"
  //-------------------------------------------------------------------
  boolean TypeIdentifier_2()
    {
      if (saved("TypeIdentifier_2",TypeIdentifier_2)) return reuseInner();
      if (Reserved() || next("var") || next("yield")) return acceptInner();
      return rejectInner();
    }

  Cache TypeIdentifier_2 = new Cache();

  //=====================================================================
  //  Letter = [a-z] / [A-Z] / [_$] ;
  //=====================================================================
  boolean Letter()
    {
      if (saved("Letter",Letter)) return reuse();
      if (nextIn('a','z') || nextIn('A','Z') || nextIn("_$")) return accept();
      return reject();
    }

  Cache Letter = new Cache();

  //=====================================================================
  //  LetterOrDigit = [a-z] / [A-Z] / [0-9] / [_$] ;
  //=====================================================================
  boolean LetterOrDigit()
    {
      if (saved("LetterOrDigit",LetterOrDigit)) return reuse();
      if (nextIn('a','z') || nextIn('A','Z') || nextIn('0','9') || nextIn("_$")) return accept();
      return reject();
    }

  Cache LetterOrDigit = new Cache();

  //=====================================================================
  //  Reserved = "abstract" / "assert" / "boolean" / "break" / "byte" /
  //    "case" / "catch" / "char" / "class" / "const" / "continue" /
  //    "default" / "double" / "do" / "else" / "enum" / "extends" /
  //    "false" / "finally" / "final" / "float" / "for" / "goto" / "if" /
  //    "implements" / "import" / "interface" / "int" / "instanceof" /
  //    "long" / "native" / "new" / "null" / "package" / "private" /
  //    "protected" / "public" / "return" / "short" / "static" /
  //    "strictfp" / "super" / "switch" / "synchronized" / "this" /
  //    "throws" / "throw" / "transient" / "true" / "try" / "void" /
  //    "volatile" / "while" / "_" ;
  //=====================================================================
  boolean Reserved()
    {
      if (saved("Reserved",Reserved)) return reuse();
      if (next("abstract") || next("assert") || next("boolean") || next("break")) return accept();
      if (next("byte")) return accept();
      if (next("case")) return accept();
      if (next("catch")) return accept();
      if (next("char")) return accept();
      if (next("class")) return accept();
      if (next("const")) return accept();
      if (next("continue")) return accept();
      if (next("default")) return accept();
      if (next("double")) return accept();
      if (next("do")) return accept();
      if (next("else")) return accept();
      if (next("enum")) return accept();
      if (next("extends")) return accept();
      if (next("false")) return accept();
      if (next("finally")) return accept();
      if (next("final")) return accept();
      if (next("float")) return accept();
      if (next("for")) return accept();
      if (next("goto")) return accept();
      if (next("if")) return accept();
      if (next("implements")) return accept();
      if (next("import")) return accept();
      if (next("interface")) return accept();
      if (next("int")) return accept();
      if (next("instanceof")) return accept();
      if (next("long")) return accept();
      if (next("native")) return accept();
      if (next("new")) return accept();
      if (next("null")) return accept();
      if (next("package")) return accept();
      if (next("private")) return accept();
      if (next("protected")) return accept();
      if (next("public")) return accept();
      if (next("return")) return accept();
      if (next("short")) return accept();
      if (next("static")) return accept();
      if (next("strictfp")) return accept();
      if (next("super")) return accept();
      if (next("switch")) return accept();
      if (next("synchronized")) return accept();
      if (next("this")) return accept();
      if (next("throws")) return accept();
      if (next("throw")) return accept();
      if (next("transient")) return accept();
      if (next("true")) return accept();
      if (next("try")) return accept();
      if (next("void")) return accept();
      if (next("volatile")) return accept();
      if (next("while")) return accept();
      if (next('_')) return accept();
      return reject();
    }

  Cache Reserved = new Cache();

  //=====================================================================
  //  ABSTRACT = Word:"abstract" Spacing ;
  //=====================================================================
  boolean ABSTRACT()
    {
      if (saved("ABSTRACT",ABSTRACT)) return reuse();
      if (!is(true,()->Word(),()->next("abstract"))) return reject();
      Spacing();
      return accept();
    }

  Cache ABSTRACT = new Cache();

  //=====================================================================
  //  ASSERT = Word:"assert" Spacing ;
  //=====================================================================
  boolean ASSERT()
    {
      if (saved("ASSERT",ASSERT)) return reuse();
      if (!is(true,()->Word(),()->next("assert"))) return reject();
      Spacing();
      return accept();
    }

  Cache ASSERT = new Cache();

  //=====================================================================
  //  BOOLEAN = Word:"boolean" Spacing ;
  //=====================================================================
  boolean BOOLEAN()
    {
      if (saved("BOOLEAN",BOOLEAN)) return reuse();
      if (!is(true,()->Word(),()->next("boolean"))) return reject();
      Spacing();
      return accept();
    }

  Cache BOOLEAN = new Cache();

  //=====================================================================
  //  BREAK = Word:"break" Spacing ;
  //=====================================================================
  boolean BREAK()
    {
      if (saved("BREAK",BREAK)) return reuse();
      if (!is(true,()->Word(),()->next("break"))) return reject();
      Spacing();
      return accept();
    }

  Cache BREAK = new Cache();

  //=====================================================================
  //  BYTE = Word:"byte" Spacing ;
  //=====================================================================
  boolean BYTE()
    {
      if (saved("BYTE",BYTE)) return reuse();
      if (!is(true,()->Word(),()->next("byte"))) return reject();
      Spacing();
      return accept();
    }

  Cache BYTE = new Cache();

  //=====================================================================
  //  CASE = Word:"case" Spacing ;
  //=====================================================================
  boolean CASE()
    {
      if (saved("CASE",CASE)) return reuse();
      if (!is(true,()->Word(),()->next("case"))) return reject();
      Spacing();
      return accept();
    }

  Cache CASE = new Cache();

  //=====================================================================
  //  CATCH = Word:"catch" Spacing ;
  //=====================================================================
  boolean CATCH()
    {
      if (saved("CATCH",CATCH)) return reuse();
      if (!is(true,()->Word(),()->next("catch"))) return reject();
      Spacing();
      return accept();
    }

  Cache CATCH = new Cache();

  //=====================================================================
  //  CHAR = Word:"char" Spacing ;
  //=====================================================================
  boolean CHAR()
    {
      if (saved("CHAR",CHAR)) return reuse();
      if (!is(true,()->Word(),()->next("char"))) return reject();
      Spacing();
      return accept();
    }

  Cache CHAR = new Cache();

  //=====================================================================
  //  CLASS = Word:"class" Spacing ;
  //=====================================================================
  boolean CLASS()
    {
      if (saved("CLASS",CLASS)) return reuse();
      if (!is(true,()->Word(),()->next("class"))) return reject();
      Spacing();
      return accept();
    }

  Cache CLASS = new Cache();

  //=====================================================================
  //  CONTINUE = Word:"continue" Spacing ;
  //=====================================================================
  boolean CONTINUE()
    {
      if (saved("CONTINUE",CONTINUE)) return reuse();
      if (!is(true,()->Word(),()->next("continue"))) return reject();
      Spacing();
      return accept();
    }

  Cache CONTINUE = new Cache();

  //=====================================================================
  //  DEFAULT = Word:"default" Spacing ;
  //=====================================================================
  boolean DEFAULT()
    {
      if (saved("DEFAULT",DEFAULT)) return reuse();
      if (!is(true,()->Word(),()->next("default"))) return reject();
      Spacing();
      return accept();
    }

  Cache DEFAULT = new Cache();

  //=====================================================================
  //  DOUBLE = Word:"double" Spacing ;
  //=====================================================================
  boolean DOUBLE()
    {
      if (saved("DOUBLE",DOUBLE)) return reuse();
      if (!is(true,()->Word(),()->next("double"))) return reject();
      Spacing();
      return accept();
    }

  Cache DOUBLE = new Cache();

  //=====================================================================
  //  DO = Word:"do" Spacing ;
  //=====================================================================
  boolean DO()
    {
      if (saved("DO",DO)) return reuse();
      if (!is(true,()->Word(),()->next("do"))) return reject();
      Spacing();
      return accept();
    }

  Cache DO = new Cache();

  //=====================================================================
  //  ELSE = Word:"else" Spacing ;
  //=====================================================================
  boolean ELSE()
    {
      if (saved("ELSE",ELSE)) return reuse();
      if (!is(true,()->Word(),()->next("else"))) return reject();
      Spacing();
      return accept();
    }

  Cache ELSE = new Cache();

  //=====================================================================
  //  ENUM = Word:"enum" Spacing ;
  //=====================================================================
  boolean ENUM()
    {
      if (saved("ENUM",ENUM)) return reuse();
      if (!is(true,()->Word(),()->next("enum"))) return reject();
      Spacing();
      return accept();
    }

  Cache ENUM = new Cache();

  //=====================================================================
  //  EXTENDS = Word:"extends" Spacing ;
  //=====================================================================
  boolean EXTENDS()
    {
      if (saved("EXTENDS",EXTENDS)) return reuse();
      if (!is(true,()->Word(),()->next("extends"))) return reject();
      Spacing();
      return accept();
    }

  Cache EXTENDS = new Cache();

  //=====================================================================
  //  FALSE = Word:"false" Spacing ;
  //=====================================================================
  boolean FALSE()
    {
      if (saved("FALSE",FALSE)) return reuse();
      if (!is(true,()->Word(),()->next("false"))) return reject();
      Spacing();
      return accept();
    }

  Cache FALSE = new Cache();

  //=====================================================================
  //  FINALLY = Word:"finally" Spacing ;
  //=====================================================================
  boolean FINALLY()
    {
      if (saved("FINALLY",FINALLY)) return reuse();
      if (!is(true,()->Word(),()->next("finally"))) return reject();
      Spacing();
      return accept();
    }

  Cache FINALLY = new Cache();

  //=====================================================================
  //  FINAL = Word:"final" Spacing ;
  //=====================================================================
  boolean FINAL()
    {
      if (saved("FINAL",FINAL)) return reuse();
      if (!is(true,()->Word(),()->next("final"))) return reject();
      Spacing();
      return accept();
    }

  Cache FINAL = new Cache();

  //=====================================================================
  //  FLOAT = Word:"float" Spacing ;
  //=====================================================================
  boolean FLOAT()
    {
      if (saved("FLOAT",FLOAT)) return reuse();
      if (!is(true,()->Word(),()->next("float"))) return reject();
      Spacing();
      return accept();
    }

  Cache FLOAT = new Cache();

  //=====================================================================
  //  FOR = Word:"for" Spacing ;
  //=====================================================================
  boolean FOR()
    {
      if (saved("FOR",FOR)) return reuse();
      if (!is(true,()->Word(),()->next("for"))) return reject();
      Spacing();
      return accept();
    }

  Cache FOR = new Cache();

  //=====================================================================
  //  IF = Word:"if" Spacing ;
  //=====================================================================
  boolean IF()
    {
      if (saved("IF",IF)) return reuse();
      if (!is(true,()->Word(),()->next("if"))) return reject();
      Spacing();
      return accept();
    }

  Cache IF = new Cache();

  //=====================================================================
  //  IMPLEMENTS = Word:"implements" Spacing ;
  //=====================================================================
  boolean IMPLEMENTS()
    {
      if (saved("IMPLEMENTS",IMPLEMENTS)) return reuse();
      if (!is(true,()->Word(),()->next("implements"))) return reject();
      Spacing();
      return accept();
    }

  Cache IMPLEMENTS = new Cache();

  //=====================================================================
  //  IMPORT = Word:"import" Spacing ;
  //=====================================================================
  boolean IMPORT()
    {
      if (saved("IMPORT",IMPORT)) return reuse();
      if (!is(true,()->Word(),()->next("import"))) return reject();
      Spacing();
      return accept();
    }

  Cache IMPORT = new Cache();

  //=====================================================================
  //  INTERFACE = Word:"interface" Spacing ;
  //=====================================================================
  boolean INTERFACE()
    {
      if (saved("INTERFACE",INTERFACE)) return reuse();
      if (!is(true,()->Word(),()->next("interface"))) return reject();
      Spacing();
      return accept();
    }

  Cache INTERFACE = new Cache();

  //=====================================================================
  //  INT = Word:"int" Spacing ;
  //=====================================================================
  boolean INT()
    {
      if (saved("INT",INT)) return reuse();
      if (!is(true,()->Word(),()->next("int"))) return reject();
      Spacing();
      return accept();
    }

  Cache INT = new Cache();

  //=====================================================================
  //  INSTANCEOF = Word:"instanceof" Spacing ;
  //=====================================================================
  boolean INSTANCEOF()
    {
      if (saved("INSTANCEOF",INSTANCEOF)) return reuse();
      if (!is(true,()->Word(),()->next("instanceof"))) return reject();
      Spacing();
      return accept();
    }

  Cache INSTANCEOF = new Cache();

  //=====================================================================
  //  LONG = Word:"long" Spacing ;
  //=====================================================================
  boolean LONG()
    {
      if (saved("LONG",LONG)) return reuse();
      if (!is(true,()->Word(),()->next("long"))) return reject();
      Spacing();
      return accept();
    }

  Cache LONG = new Cache();

  //=====================================================================
  //  NATIVE = Word:"native" Spacing ;
  //=====================================================================
  boolean NATIVE()
    {
      if (saved("NATIVE",NATIVE)) return reuse();
      if (!is(true,()->Word(),()->next("native"))) return reject();
      Spacing();
      return accept();
    }

  Cache NATIVE = new Cache();

  //=====================================================================
  //  NEW = Word:"new" Spacing ;
  //=====================================================================
  boolean NEW()
    {
      if (saved("NEW",NEW)) return reuse();
      if (!is(true,()->Word(),()->next("new"))) return reject();
      Spacing();
      return accept();
    }

  Cache NEW = new Cache();

  //=====================================================================
  //  NULL = Word:"null" Spacing ;
  //=====================================================================
  boolean NULL()
    {
      if (saved("NULL",NULL)) return reuse();
      if (!is(true,()->Word(),()->next("null"))) return reject();
      Spacing();
      return accept();
    }

  Cache NULL = new Cache();

  //=====================================================================
  //  PACKAGE = Word:"package" Spacing ;
  //=====================================================================
  boolean PACKAGE()
    {
      if (saved("PACKAGE",PACKAGE)) return reuse();
      if (!is(true,()->Word(),()->next("package"))) return reject();
      Spacing();
      return accept();
    }

  Cache PACKAGE = new Cache();

  //=====================================================================
  //  PRIVATE = Word:"private" Spacing ;
  //=====================================================================
  boolean PRIVATE()
    {
      if (saved("PRIVATE",PRIVATE)) return reuse();
      if (!is(true,()->Word(),()->next("private"))) return reject();
      Spacing();
      return accept();
    }

  Cache PRIVATE = new Cache();

  //=====================================================================
  //  PROTECTED = Word:"protected" Spacing ;
  //=====================================================================
  boolean PROTECTED()
    {
      if (saved("PROTECTED",PROTECTED)) return reuse();
      if (!is(true,()->Word(),()->next("protected"))) return reject();
      Spacing();
      return accept();
    }

  Cache PROTECTED = new Cache();

  //=====================================================================
  //  PUBLIC = Word:"public" Spacing ;
  //=====================================================================
  boolean PUBLIC()
    {
      if (saved("PUBLIC",PUBLIC)) return reuse();
      if (!is(true,()->Word(),()->next("public"))) return reject();
      Spacing();
      return accept();
    }

  Cache PUBLIC = new Cache();

  //=====================================================================
  //  RETURN = Word:"return" Spacing ;
  //=====================================================================
  boolean RETURN()
    {
      if (saved("RETURN",RETURN)) return reuse();
      if (!is(true,()->Word(),()->next("return"))) return reject();
      Spacing();
      return accept();
    }

  Cache RETURN = new Cache();

  //=====================================================================
  //  SHORT = Word:"short" Spacing ;
  //=====================================================================
  boolean SHORT()
    {
      if (saved("SHORT",SHORT)) return reuse();
      if (!is(true,()->Word(),()->next("short"))) return reject();
      Spacing();
      return accept();
    }

  Cache SHORT = new Cache();

  //=====================================================================
  //  STATIC = Word:"static" Spacing ;
  //=====================================================================
  boolean STATIC()
    {
      if (saved("STATIC",STATIC)) return reuse();
      if (!is(true,()->Word(),()->next("static"))) return reject();
      Spacing();
      return accept();
    }

  Cache STATIC = new Cache();

  //=====================================================================
  //  STRICTFP = Word:"strictfp" Spacing ;
  //=====================================================================
  boolean STRICTFP()
    {
      if (saved("STRICTFP",STRICTFP)) return reuse();
      if (!is(true,()->Word(),()->next("strictfp"))) return reject();
      Spacing();
      return accept();
    }

  Cache STRICTFP = new Cache();

  //=====================================================================
  //  SUPER = Word:"super" Spacing ;
  //=====================================================================
  boolean SUPER()
    {
      if (saved("SUPER",SUPER)) return reuse();
      if (!is(true,()->Word(),()->next("super"))) return reject();
      Spacing();
      return accept();
    }

  Cache SUPER = new Cache();

  //=====================================================================
  //  SWITCH = Word:"switch" Spacing ;
  //=====================================================================
  boolean SWITCH()
    {
      if (saved("SWITCH",SWITCH)) return reuse();
      if (!is(true,()->Word(),()->next("switch"))) return reject();
      Spacing();
      return accept();
    }

  Cache SWITCH = new Cache();

  //=====================================================================
  //  SYNCHRONIZED = Word:"synchronized" Spacing ;
  //=====================================================================
  boolean SYNCHRONIZED()
    {
      if (saved("SYNCHRONIZED",SYNCHRONIZED)) return reuse();
      if (!is(true,()->Word(),()->next("synchronized"))) return reject();
      Spacing();
      return accept();
    }

  Cache SYNCHRONIZED = new Cache();

  //=====================================================================
  //  THIS = Word:"this" Spacing ;
  //=====================================================================
  boolean THIS()
    {
      if (saved("THIS",THIS)) return reuse();
      if (!is(true,()->Word(),()->next("this"))) return reject();
      Spacing();
      return accept();
    }

  Cache THIS = new Cache();

  //=====================================================================
  //  THROWS = Word:"throws" Spacing ;
  //=====================================================================
  boolean THROWS()
    {
      if (saved("THROWS",THROWS)) return reuse();
      if (!is(true,()->Word(),()->next("throws"))) return reject();
      Spacing();
      return accept();
    }

  Cache THROWS = new Cache();

  //=====================================================================
  //  THROW = Word:"throw" Spacing ;
  //=====================================================================
  boolean THROW()
    {
      if (saved("THROW",THROW)) return reuse();
      if (!is(true,()->Word(),()->next("throw"))) return reject();
      Spacing();
      return accept();
    }

  Cache THROW = new Cache();

  //=====================================================================
  //  TRANSIENT = Word:"transient" Spacing ;
  //=====================================================================
  boolean TRANSIENT()
    {
      if (saved("TRANSIENT",TRANSIENT)) return reuse();
      if (!is(true,()->Word(),()->next("transient"))) return reject();
      Spacing();
      return accept();
    }

  Cache TRANSIENT = new Cache();

  //=====================================================================
  //  TRUE = Word:"true" Spacing ;
  //=====================================================================
  boolean TRUE()
    {
      if (saved("TRUE",TRUE)) return reuse();
      if (!is(true,()->Word(),()->next("true"))) return reject();
      Spacing();
      return accept();
    }

  Cache TRUE = new Cache();

  //=====================================================================
  //  TRY = Word:"try" Spacing ;
  //=====================================================================
  boolean TRY()
    {
      if (saved("TRY",TRY)) return reuse();
      if (!is(true,()->Word(),()->next("try"))) return reject();
      Spacing();
      return accept();
    }

  Cache TRY = new Cache();

  //=====================================================================
  //  VOID = Word:"void" Spacing ;
  //=====================================================================
  boolean VOID()
    {
      if (saved("VOID",VOID)) return reuse();
      if (!is(true,()->Word(),()->next("void"))) return reject();
      Spacing();
      return accept();
    }

  Cache VOID = new Cache();

  //=====================================================================
  //  VOLATILE = Word:"volatile" Spacing ;
  //=====================================================================
  boolean VOLATILE()
    {
      if (saved("VOLATILE",VOLATILE)) return reuse();
      if (!is(true,()->Word(),()->next("volatile"))) return reject();
      Spacing();
      return accept();
    }

  Cache VOLATILE = new Cache();

  //=====================================================================
  //  WHILE = Word:"while" Spacing ;
  //=====================================================================
  boolean WHILE()
    {
      if (saved("WHILE",WHILE)) return reuse();
      if (!is(true,()->Word(),()->next("while"))) return reject();
      Spacing();
      return accept();
    }

  Cache WHILE = new Cache();

  //=====================================================================
  //  OPEN = Word:"open" Spacing ;
  //=====================================================================
  boolean OPEN()
    {
      if (saved("OPEN",OPEN)) return reuse();
      if (!is(true,()->Word(),()->next("open"))) return reject();
      Spacing();
      return accept();
    }

  Cache OPEN = new Cache();

  //=====================================================================
  //  MODULE = Word:"module" Spacing ;
  //=====================================================================
  boolean MODULE()
    {
      if (saved("MODULE",MODULE)) return reuse();
      if (!is(true,()->Word(),()->next("module"))) return reject();
      Spacing();
      return accept();
    }

  Cache MODULE = new Cache();

  //=====================================================================
  //  REQUIRES = Word:"requires" Spacing ;
  //=====================================================================
  boolean REQUIRES()
    {
      if (saved("REQUIRES",REQUIRES)) return reuse();
      if (!is(true,()->Word(),()->next("requires"))) return reject();
      Spacing();
      return accept();
    }

  Cache REQUIRES = new Cache();

  //=====================================================================
  //  TRANSITIVE = Word:"transitive" Spacing ;
  //=====================================================================
  boolean TRANSITIVE()
    {
      if (saved("TRANSITIVE",TRANSITIVE)) return reuse();
      if (!is(true,()->Word(),()->next("transitive"))) return reject();
      Spacing();
      return accept();
    }

  Cache TRANSITIVE = new Cache();

  //=====================================================================
  //  EXPORTS = Word:"exports" Spacing ;
  //=====================================================================
  boolean EXPORTS()
    {
      if (saved("EXPORTS",EXPORTS)) return reuse();
      if (!is(true,()->Word(),()->next("exports"))) return reject();
      Spacing();
      return accept();
    }

  Cache EXPORTS = new Cache();

  //=====================================================================
  //  OPENS = Word:"opens" Spacing ;
  //=====================================================================
  boolean OPENS()
    {
      if (saved("OPENS",OPENS)) return reuse();
      if (!is(true,()->Word(),()->next("opens"))) return reject();
      Spacing();
      return accept();
    }

  Cache OPENS = new Cache();

  //=====================================================================
  //  TO = Word:"to" Spacing ;
  //=====================================================================
  boolean TO()
    {
      if (saved("TO",TO)) return reuse();
      if (!is(true,()->Word(),()->next("to"))) return reject();
      Spacing();
      return accept();
    }

  Cache TO = new Cache();

  //=====================================================================
  //  USES = Word:"uses" Spacing ;
  //=====================================================================
  boolean USES()
    {
      if (saved("USES",USES)) return reuse();
      if (!is(true,()->Word(),()->next("uses"))) return reject();
      Spacing();
      return accept();
    }

  Cache USES = new Cache();

  //=====================================================================
  //  PROVIDES = Word:"provides" Spacing ;
  //=====================================================================
  boolean PROVIDES()
    {
      if (saved("PROVIDES",PROVIDES)) return reuse();
      if (!is(true,()->Word(),()->next("provides"))) return reject();
      Spacing();
      return accept();
    }

  Cache PROVIDES = new Cache();

  //=====================================================================
  //  WITH = Word:"with" Spacing ;
  //=====================================================================
  boolean WITH()
    {
      if (saved("WITH",WITH)) return reuse();
      if (!is(true,()->Word(),()->next("with"))) return reject();
      Spacing();
      return accept();
    }

  Cache WITH = new Cache();

  //=====================================================================
  //  VAR = Word:"var" Spacing ;
  //=====================================================================
  boolean VAR()
    {
      if (saved("VAR",VAR)) return reuse();
      if (!is(true,()->Word(),()->next("var"))) return reject();
      Spacing();
      return accept();
    }

  Cache VAR = new Cache();

  //=====================================================================
  //  YIELD = Word:"yield" Spacing ;
  //=====================================================================
  boolean YIELD()
    {
      if (saved("YIELD",YIELD)) return reuse();
      if (!is(true,()->Word(),()->next("yield"))) return reject();
      Spacing();
      return accept();
    }

  Cache YIELD = new Cache();

  //=====================================================================
  //  Literal = FloatLiteral / IntegerLiteral / BooleanLiteral /
  //    CharLiteral / StringLiteral / NullLiteral ;
  //=====================================================================
  boolean Literal()
    {
      if (saved("Literal",Literal)) return reuse();
      if (FloatLiteral() || IntegerLiteral() || BooleanLiteral() || CharLiteral()) return accept();
      if (StringLiteral()) return accept();
      if (NullLiteral()) return accept();
      return reject();
    }

  Cache Literal = new Cache();

  //=====================================================================
  //  IntegerLiteral = (HexNumeral / BinaryNumeral / OctalNumeral /
  //    DecimalNumeral) [lL]? Spacing ;
  //=====================================================================
  boolean IntegerLiteral()
    {
      if (saved("IntegerLiteral",IntegerLiteral)) return reuse();
      if (!HexNumeral()
       && !BinaryNumeral()
       && !OctalNumeral()
       && !DecimalNumeral()
         ) return reject();
      nextIn("lL");
      Spacing();
      return accept();
    }

  Cache IntegerLiteral = new Cache();

  //=====================================================================
  //  DecimalNumeral = "0" / [1-9] ([_]* [0-9])* ;
  //=====================================================================
  boolean DecimalNumeral()
    {
      if (saved("DecimalNumeral",DecimalNumeral)) return reuse();
      if (next('0') || DecimalNumeral_1()) return accept();
      return reject();
    }

  Cache DecimalNumeral = new Cache();

  //-------------------------------------------------------------------
  //  DecimalNumeral_1 = [1-9] ([_]* [0-9])*
  //-------------------------------------------------------------------
  boolean DecimalNumeral_1()
    {
      if (saved("DecimalNumeral_1",DecimalNumeral_1)) return reuseInner();
      if (!nextIn('1','9')) return rejectInner();
      while (DecimalNumeral_4());
      return acceptInner();
    }

  Cache DecimalNumeral_1 = new Cache();

  //-------------------------------------------------------------------
  //  DecimalNumeral_4 = [_]* [0-9]
  //-------------------------------------------------------------------
  boolean DecimalNumeral_4()
    {
      if (saved("DecimalNumeral_4",DecimalNumeral_4)) return reuseInner();
      while (next('_'));
      if (!nextIn('0','9')) return rejectInner();
      return acceptInner();
    }

  Cache DecimalNumeral_4 = new Cache();

  //=====================================================================
  //  HexNumeral = ("0x" / "0X") HexDigits ;
  //=====================================================================
  boolean HexNumeral()
    {
      if (saved("HexNumeral",HexNumeral)) return reuse();
      if ((!next("0x")
       && !next("0X")) || !HexDigits()) return reject();
      return accept();
    }

  Cache HexNumeral = new Cache();

  //=====================================================================
  //  OctalNumeral = "0" ([_]* [0-7])+ ;
  //=====================================================================
  boolean OctalNumeral()
    {
      if (saved("OctalNumeral",OctalNumeral)) return reuse();
      if (!next('0') || !OctalNumeral_3()) return reject();
      while (OctalNumeral_3());
      return accept();
    }

  Cache OctalNumeral = new Cache();

  //-------------------------------------------------------------------
  //  OctalNumeral_3 = [_]* [0-7]
  //-------------------------------------------------------------------
  boolean OctalNumeral_3()
    {
      if (saved("OctalNumeral_3",OctalNumeral_3)) return reuseInner();
      while (next('_'));
      if (!nextIn('0','7')) return rejectInner();
      return acceptInner();
    }

  Cache OctalNumeral_3 = new Cache();

  //=====================================================================
  //  BinaryNumeral = ("0b" / "0B") [01] ([_]* [01])* ;
  //=====================================================================
  boolean BinaryNumeral()
    {
      if (saved("BinaryNumeral",BinaryNumeral)) return reuse();
      if ((!next("0b")
       && !next("0B")) || !nextIn("01")) return reject();
      while (BinaryNumeral_6());
      return accept();
    }

  Cache BinaryNumeral = new Cache();

  //-------------------------------------------------------------------
  //  BinaryNumeral_6 = [_]* [01]
  //-------------------------------------------------------------------
  boolean BinaryNumeral_6()
    {
      if (saved("BinaryNumeral_6",BinaryNumeral_6)) return reuseInner();
      while (next('_'));
      if (!nextIn("01")) return rejectInner();
      return acceptInner();
    }

  Cache BinaryNumeral_6 = new Cache();

  //=====================================================================
  //  FloatLiteral = (HexadecimalFloatingPointLiteral /
  //    DecimalFloatingPointLiteral) Spacing ;
  //=====================================================================
  boolean FloatLiteral()
    {
      if (saved("FloatLiteral",FloatLiteral)) return reuse();
      if (!HexadecimalFloatingPointLiteral()
       && !DecimalFloatingPointLiteral()
         ) return reject();
      Spacing();
      return accept();
    }

  Cache FloatLiteral = new Cache();

  //=====================================================================
  //  DecimalFloatingPointLiteral = Digits "." Digits? Exponent? [fFdD]?
  //    / "." Digits Exponent? [fFdD]? / Digits Exponent [fFdD]? / Digits
  //    Exponent? [fFdD] ;
  //=====================================================================
  boolean DecimalFloatingPointLiteral()
    {
      if (saved("DecimalFloatingPointLiteral",DecimalFloatingPointLiteral)) return reuse();
      if (DecimalFloatingPointLiteral_0() || DecimalFloatingPointLiteral_6() || DecimalFloatingPointLiteral_11() || DecimalFloatingPointLiteral_14()) return accept();
      return reject();
    }

  Cache DecimalFloatingPointLiteral = new Cache();

  //-------------------------------------------------------------------
  //  DecimalFloatingPointLiteral_0 = Digits "." Digits? Exponent?
  //    [fFdD]?
  //-------------------------------------------------------------------
  boolean DecimalFloatingPointLiteral_0()
    {
      if (saved("DecimalFloatingPointLiteral_0",DecimalFloatingPointLiteral_0)) return reuseInner();
      if (!Digits() || !next('.')) return rejectInner();
      Digits();
      Exponent();
      nextIn("fFdD");
      return acceptInner();
    }

  Cache DecimalFloatingPointLiteral_0 = new Cache();

  //-------------------------------------------------------------------
  //  DecimalFloatingPointLiteral_6 = "." Digits Exponent? [fFdD]?
  //-------------------------------------------------------------------
  boolean DecimalFloatingPointLiteral_6()
    {
      if (saved("DecimalFloatingPointLiteral_6",DecimalFloatingPointLiteral_6)) return reuseInner();
      if (!next('.') || !Digits()) return rejectInner();
      Exponent();
      nextIn("fFdD");
      return acceptInner();
    }

  Cache DecimalFloatingPointLiteral_6 = new Cache();

  //-------------------------------------------------------------------
  //  DecimalFloatingPointLiteral_11 = Digits Exponent [fFdD]?
  //-------------------------------------------------------------------
  boolean DecimalFloatingPointLiteral_11()
    {
      if (saved("DecimalFloatingPointLiteral_11",DecimalFloatingPointLiteral_11)) return reuseInner();
      if (!Digits() || !Exponent()) return rejectInner();
      nextIn("fFdD");
      return acceptInner();
    }

  Cache DecimalFloatingPointLiteral_11 = new Cache();

  //-------------------------------------------------------------------
  //  DecimalFloatingPointLiteral_14 = Digits Exponent? [fFdD]
  //-------------------------------------------------------------------
  boolean DecimalFloatingPointLiteral_14()
    {
      if (saved("DecimalFloatingPointLiteral_14",DecimalFloatingPointLiteral_14)) return reuseInner();
      if (!Digits()) return rejectInner();
      Exponent();
      if (!nextIn("fFdD")) return rejectInner();
      return acceptInner();
    }

  Cache DecimalFloatingPointLiteral_14 = new Cache();

  //=====================================================================
  //  Exponent = [eE] [+-]? Digits ;
  //=====================================================================
  boolean Exponent()
    {
      if (saved("Exponent",Exponent)) return reuse();
      if (!nextIn("eE")) return reject();
      nextIn("+-");
      if (!Digits()) return reject();
      return accept();
    }

  Cache Exponent = new Cache();

  //=====================================================================
  //  HexadecimalFloatingPointLiteral = HexSignificand BinaryExponent
  //    [fFdD]? ;
  //=====================================================================
  boolean HexadecimalFloatingPointLiteral()
    {
      if (saved("HexadecimalFloatingPointLiteral",HexadecimalFloatingPointLiteral)) return reuse();
      if (!HexSignificand() || !BinaryExponent()) return reject();
      nextIn("fFdD");
      return accept();
    }

  Cache HexadecimalFloatingPointLiteral = new Cache();

  //=====================================================================
  //  HexSignificand = ("0x" / "0X") HexDigits? "." HexDigits /
  //    HexNumeral "."? ;
  //=====================================================================
  boolean HexSignificand()
    {
      if (saved("HexSignificand",HexSignificand)) return reuse();
      if (HexSignificand_0() || HexSignificand_6()) return accept();
      return reject();
    }

  Cache HexSignificand = new Cache();

  //-------------------------------------------------------------------
  //  HexSignificand_0 = ("0x" / "0X") HexDigits? "." HexDigits
  //-------------------------------------------------------------------
  boolean HexSignificand_0()
    {
      if (saved("HexSignificand_0",HexSignificand_0)) return reuseInner();
      if (!next("0x")
       && !next("0X")
         ) return rejectInner();
      HexDigits();
      if (!next('.') || !HexDigits()) return rejectInner();
      return acceptInner();
    }

  Cache HexSignificand_0 = new Cache();

  //-------------------------------------------------------------------
  //  HexSignificand_6 = HexNumeral "."?
  //-------------------------------------------------------------------
  boolean HexSignificand_6()
    {
      if (saved("HexSignificand_6",HexSignificand_6)) return reuseInner();
      if (!HexNumeral()) return rejectInner();
      next('.');
      return acceptInner();
    }

  Cache HexSignificand_6 = new Cache();

  //=====================================================================
  //  HexDigits = HexDigit ([_]* HexDigit)* ;
  //=====================================================================
  boolean HexDigits()
    {
      if (saved("HexDigits",HexDigits)) return reuse();
      if (!HexDigit()) return reject();
      while (HexDigits_2());
      return accept();
    }

  Cache HexDigits = new Cache();

  //-------------------------------------------------------------------
  //  HexDigits_2 = [_]* HexDigit
  //-------------------------------------------------------------------
  boolean HexDigits_2()
    {
      if (saved("HexDigits_2",HexDigits_2)) return reuseInner();
      while (next('_'));
      if (!HexDigit()) return rejectInner();
      return acceptInner();
    }

  Cache HexDigits_2 = new Cache();

  //=====================================================================
  //  HexDigit = [a-f] / [A-F] / [0-9] ;
  //=====================================================================
  boolean HexDigit()
    {
      if (saved("HexDigit",HexDigit)) return reuse();
      if (nextIn('a','f') || nextIn('A','F') || nextIn('0','9')) return accept();
      return reject();
    }

  Cache HexDigit = new Cache();

  //=====================================================================
  //  BinaryExponent = [pP] [+-]? Digits ;
  //=====================================================================
  boolean BinaryExponent()
    {
      if (saved("BinaryExponent",BinaryExponent)) return reuse();
      if (!nextIn("pP")) return reject();
      nextIn("+-");
      if (!Digits()) return reject();
      return accept();
    }

  Cache BinaryExponent = new Cache();

  //=====================================================================
  //  Digits = [0-9] ([_]* [0-9])* ;
  //=====================================================================
  boolean Digits()
    {
      if (saved("Digits",Digits)) return reuse();
      if (!nextIn('0','9')) return reject();
      while (DecimalNumeral_4());
      return accept();
    }

  Cache Digits = new Cache();

  //=====================================================================
  //  BooleanLiteral = TRUE / FALSE ;
  //=====================================================================
  boolean BooleanLiteral()
    {
      if (saved("BooleanLiteral",BooleanLiteral)) return reuse();
      if (TRUE() || FALSE()) return accept();
      return reject();
    }

  Cache BooleanLiteral = new Cache();

  //=====================================================================
  //  CharLiteral = "'" (Escape / ^['\\n\r]) "'" Spacing ;
  //=====================================================================
  boolean CharLiteral()
    {
      if (saved("CharLiteral",CharLiteral)) return reuse();
      if (!next('\'') || (!Escape()
       && !nextNotIn("'\\\n\r")) || !next('\'')) return reject();
      Spacing();
      return accept();
    }

  Cache CharLiteral = new Cache();

  //=====================================================================
  //  StringLiteral = """ (Escape / ^["\\n\r])* """ Spacing ;
  //=====================================================================
  boolean StringLiteral()
    {
      if (saved("StringLiteral",StringLiteral)) return reuse();
      if (!next('"')) return reject();
      while (StringLiteral_3());
      if (!next('"')) return reject();
      Spacing();
      return accept();
    }

  Cache StringLiteral = new Cache();

  //-------------------------------------------------------------------
  //  StringLiteral_3 = Escape / ^["\\n\r]
  //-------------------------------------------------------------------
  boolean StringLiteral_3()
    {
      if (saved("StringLiteral_3",StringLiteral_3)) return reuseInner();
      if (Escape() || nextNotIn("\"\\\n\r")) return acceptInner();
      return rejectInner();
    }

  Cache StringLiteral_3 = new Cache();

  //=====================================================================
  //  Escape = "\" ([btnfr"'\] / OctalEscape / UnicodeEscape) ;
  //=====================================================================
  boolean Escape()
    {
      if (saved("Escape",Escape)) return reuse();
      if (!next('\\') || (!nextIn("btnfr\"'\\")
       && !OctalEscape()
       && !UnicodeEscape())
         ) return reject();
      return accept();
    }

  Cache Escape = new Cache();

  //=====================================================================
  //  OctalEscape = [0-3] [0-7] [0-7] / [0-7] [0-7] / [0-7] ;
  //=====================================================================
  boolean OctalEscape()
    {
      if (saved("OctalEscape",OctalEscape)) return reuse();
      if (OctalEscape_0() || OctalEscape_4() || nextIn('0','7')) return accept();
      return reject();
    }

  Cache OctalEscape = new Cache();

  //-------------------------------------------------------------------
  //  OctalEscape_0 = [0-3] [0-7] [0-7]
  //-------------------------------------------------------------------
  boolean OctalEscape_0()
    {
      if (saved("OctalEscape_0",OctalEscape_0)) return reuseInner();
      if (!nextIn('0','3') || !nextIn('0','7') || !nextIn('0','7')) return rejectInner();
      return acceptInner();
    }

  Cache OctalEscape_0 = new Cache();

  //-------------------------------------------------------------------
  //  OctalEscape_4 = [0-7] [0-7]
  //-------------------------------------------------------------------
  boolean OctalEscape_4()
    {
      if (saved("OctalEscape_4",OctalEscape_4)) return reuseInner();
      if (!nextIn('0','7') || !nextIn('0','7')) return rejectInner();
      return acceptInner();
    }

  Cache OctalEscape_4 = new Cache();

  //=====================================================================
  //  UnicodeEscape = "u"+ HexDigit HexDigit HexDigit HexDigit ;
  //=====================================================================
  boolean UnicodeEscape()
    {
      if (saved("UnicodeEscape",UnicodeEscape)) return reuse();
      if (!next('u')) return reject();
      while (next('u'));
      if (!HexDigit() || !HexDigit() || !HexDigit() || !HexDigit()) return reject();
      return accept();
    }

  Cache UnicodeEscape = new Cache();

  //=====================================================================
  //  NullLiteral = NULL ;
  //=====================================================================
  boolean NullLiteral()
    {
      if (saved("NullLiteral",NullLiteral)) return reuse();
      if (!NULL()) return reject();
      return accept();
    }

  Cache NullLiteral = new Cache();

  //=====================================================================
  //  AT = "@" Spacing ;
  //=====================================================================
  boolean AT()
    {
      if (saved("AT",AT)) return reuse();
      if (!next('@')) return reject();
      Spacing();
      return accept();
    }

  Cache AT = new Cache();

  //=====================================================================
  //  COLONCOLON = "::" Spacing ;
  //=====================================================================
  boolean COLONCOLON()
    {
      if (saved("COLONCOLON",COLONCOLON)) return reuse();
      if (!next("::")) return reject();
      Spacing();
      return accept();
    }

  Cache COLONCOLON = new Cache();

  //=====================================================================
  //  COMMA = "," Spacing ;
  //=====================================================================
  boolean COMMA()
    {
      if (saved("COMMA",COMMA)) return reuse();
      if (!next(',')) return reject();
      Spacing();
      return accept();
    }

  Cache COMMA = new Cache();

  //=====================================================================
  //  DOT = "." !".." Spacing ;
  //=====================================================================
  boolean DOT()
    {
      if (saved("DOT",DOT)) return reuse();
      if (!next('.') || !aheadNot("..")) return reject();
      Spacing();
      return accept();
    }

  Cache DOT = new Cache();

  //=====================================================================
  //  ELLIPSIS = "..." Spacing ;
  //=====================================================================
  boolean ELLIPSIS()
    {
      if (saved("ELLIPSIS",ELLIPSIS)) return reuse();
      if (!next("...")) return reject();
      Spacing();
      return accept();
    }

  Cache ELLIPSIS = new Cache();

  //=====================================================================
  //  LPAR = "(" Spacing ;
  //=====================================================================
  boolean LPAR()
    {
      if (saved("LPAR",LPAR)) return reuse();
      if (!next('(')) return reject();
      Spacing();
      return accept();
    }

  Cache LPAR = new Cache();

  //=====================================================================
  //  LBRK = "[" Spacing ;
  //=====================================================================
  boolean LBRK()
    {
      if (saved("LBRK",LBRK)) return reuse();
      if (!next('[')) return reject();
      Spacing();
      return accept();
    }

  Cache LBRK = new Cache();

  //=====================================================================
  //  RBRK = "]" Spacing ;
  //=====================================================================
  boolean RBRK()
    {
      if (saved("RBRK",RBRK)) return reuse();
      if (!next(']')) return reject();
      Spacing();
      return accept();
    }

  Cache RBRK = new Cache();

  //=====================================================================
  //  RPAR = ")" Spacing ;
  //=====================================================================
  boolean RPAR()
    {
      if (saved("RPAR",RPAR)) return reuse();
      if (!next(')')) return reject();
      Spacing();
      return accept();
    }

  Cache RPAR = new Cache();

  //=====================================================================
  //  LWING = "{" Spacing ;
  //=====================================================================
  boolean LWING()
    {
      if (saved("LWING",LWING)) return reuse();
      if (!next('{')) return reject();
      Spacing();
      return accept();
    }

  Cache LWING = new Cache();

  //=====================================================================
  //  RWING = "}" Spacing ;
  //=====================================================================
  boolean RWING()
    {
      if (saved("RWING",RWING)) return reuse();
      if (!next('}')) return reject();
      Spacing();
      return accept();
    }

  Cache RWING = new Cache();

  //=====================================================================
  //  SEMI = ";" Spacing ;
  //=====================================================================
  boolean SEMI()
    {
      if (saved("SEMI",SEMI)) return reuse();
      if (!next(';')) return reject();
      Spacing();
      return accept();
    }

  Cache SEMI = new Cache();

  //=====================================================================
  //  AND = "&" ![=&] Spacing ;
  //=====================================================================
  boolean AND()
    {
      if (saved("AND",AND)) return reuse();
      if (!next('&') || !aheadNotIn("=&")) return reject();
      Spacing();
      return accept();
    }

  Cache AND = new Cache();

  //=====================================================================
  //  ANDAND = "&&" Spacing ;
  //=====================================================================
  boolean ANDAND()
    {
      if (saved("ANDAND",ANDAND)) return reuse();
      if (!next("&&")) return reject();
      Spacing();
      return accept();
    }

  Cache ANDAND = new Cache();

  //=====================================================================
  //  ANDEQU = "&=" Spacing ;
  //=====================================================================
  boolean ANDEQU()
    {
      if (saved("ANDEQU",ANDEQU)) return reuse();
      if (!next("&=")) return reject();
      Spacing();
      return accept();
    }

  Cache ANDEQU = new Cache();

  //=====================================================================
  //  ARROW = "->" Spacing ;
  //=====================================================================
  boolean ARROW()
    {
      if (saved("ARROW",ARROW)) return reuse();
      if (!next("->")) return reject();
      Spacing();
      return accept();
    }

  Cache ARROW = new Cache();

  //=====================================================================
  //  BANG = "!" ![=] Spacing ;
  //=====================================================================
  boolean BANG()
    {
      if (saved("BANG",BANG)) return reuse();
      if (!next('!') || !aheadNot('=')) return reject();
      Spacing();
      return accept();
    }

  Cache BANG = new Cache();

  //=====================================================================
  //  BSR = ">>>" ![=] Spacing ;
  //=====================================================================
  boolean BSR()
    {
      if (saved("BSR",BSR)) return reuse();
      if (!next(">>>") || !aheadNot('=')) return reject();
      Spacing();
      return accept();
    }

  Cache BSR = new Cache();

  //=====================================================================
  //  BSREQU = ">>>=" Spacing ;
  //=====================================================================
  boolean BSREQU()
    {
      if (saved("BSREQU",BSREQU)) return reuse();
      if (!next(">>>=")) return reject();
      Spacing();
      return accept();
    }

  Cache BSREQU = new Cache();

  //=====================================================================
  //  COLON = ":" ![:] Spacing ;
  //=====================================================================
  boolean COLON()
    {
      if (saved("COLON",COLON)) return reuse();
      if (!next(':') || !aheadNot(':')) return reject();
      Spacing();
      return accept();
    }

  Cache COLON = new Cache();

  //=====================================================================
  //  DEC = "--" Spacing ;
  //=====================================================================
  boolean DEC()
    {
      if (saved("DEC",DEC)) return reuse();
      if (!next("--")) return reject();
      Spacing();
      return accept();
    }

  Cache DEC = new Cache();

  //=====================================================================
  //  DIV = "/" ![=] Spacing ;
  //=====================================================================
  boolean DIV()
    {
      if (saved("DIV",DIV)) return reuse();
      if (!next('/') || !aheadNot('=')) return reject();
      Spacing();
      return accept();
    }

  Cache DIV = new Cache();

  //=====================================================================
  //  DIVEQU = "/=" Spacing ;
  //=====================================================================
  boolean DIVEQU()
    {
      if (saved("DIVEQU",DIVEQU)) return reuse();
      if (!next("/=")) return reject();
      Spacing();
      return accept();
    }

  Cache DIVEQU = new Cache();

  //=====================================================================
  //  EQU = "=" ![=] Spacing ;
  //=====================================================================
  boolean EQU()
    {
      if (saved("EQU",EQU)) return reuse();
      if (!next('=') || !aheadNot('=')) return reject();
      Spacing();
      return accept();
    }

  Cache EQU = new Cache();

  //=====================================================================
  //  EQUAL = "==" Spacing ;
  //=====================================================================
  boolean EQUAL()
    {
      if (saved("EQUAL",EQUAL)) return reuse();
      if (!next("==")) return reject();
      Spacing();
      return accept();
    }

  Cache EQUAL = new Cache();

  //=====================================================================
  //  GE = ">=" Spacing ;
  //=====================================================================
  boolean GE()
    {
      if (saved("GE",GE)) return reuse();
      if (!next(">=")) return reject();
      Spacing();
      return accept();
    }

  Cache GE = new Cache();

  //=====================================================================
  //  GT = ">" ![=>] Spacing ;
  //=====================================================================
  boolean GT()
    {
      if (saved("GT",GT)) return reuse();
      if (!next('>') || !aheadNotIn("=>")) return reject();
      Spacing();
      return accept();
    }

  Cache GT = new Cache();

  //=====================================================================
  //  HAT = "^" ![=] Spacing ;
  //=====================================================================
  boolean HAT()
    {
      if (saved("HAT",HAT)) return reuse();
      if (!next('^') || !aheadNot('=')) return reject();
      Spacing();
      return accept();
    }

  Cache HAT = new Cache();

  //=====================================================================
  //  HATEQU = "^=" Spacing ;
  //=====================================================================
  boolean HATEQU()
    {
      if (saved("HATEQU",HATEQU)) return reuse();
      if (!next("^=")) return reject();
      Spacing();
      return accept();
    }

  Cache HATEQU = new Cache();

  //=====================================================================
  //  INC = "++" Spacing ;
  //=====================================================================
  boolean INC()
    {
      if (saved("INC",INC)) return reuse();
      if (!next("++")) return reject();
      Spacing();
      return accept();
    }

  Cache INC = new Cache();

  //=====================================================================
  //  LE = "<=" Spacing ;
  //=====================================================================
  boolean LE()
    {
      if (saved("LE",LE)) return reuse();
      if (!next("<=")) return reject();
      Spacing();
      return accept();
    }

  Cache LE = new Cache();

  //=====================================================================
  //  LPOINT = "<" Spacing ;
  //=====================================================================
  boolean LPOINT()
    {
      if (saved("LPOINT",LPOINT)) return reuse();
      if (!next('<')) return reject();
      Spacing();
      return accept();
    }

  Cache LPOINT = new Cache();

  //=====================================================================
  //  LT = "<" ![=<] Spacing ;
  //=====================================================================
  boolean LT()
    {
      if (saved("LT",LT)) return reuse();
      if (!next('<') || !aheadNotIn("=<")) return reject();
      Spacing();
      return accept();
    }

  Cache LT = new Cache();

  //=====================================================================
  //  MINUS = "-" ![=->] Spacing ;
  //=====================================================================
  boolean MINUS()
    {
      if (saved("MINUS",MINUS)) return reuse();
      if (!next('-') || !aheadNotIn("=->")) return reject();
      Spacing();
      return accept();
    }

  Cache MINUS = new Cache();

  //=====================================================================
  //  MINUSEQU = "-=" Spacing ;
  //=====================================================================
  boolean MINUSEQU()
    {
      if (saved("MINUSEQU",MINUSEQU)) return reuse();
      if (!next("-=")) return reject();
      Spacing();
      return accept();
    }

  Cache MINUSEQU = new Cache();

  //=====================================================================
  //  MOD = "%" ![=] Spacing ;
  //=====================================================================
  boolean MOD()
    {
      if (saved("MOD",MOD)) return reuse();
      if (!next('%') || !aheadNot('=')) return reject();
      Spacing();
      return accept();
    }

  Cache MOD = new Cache();

  //=====================================================================
  //  MODEQU = "%=" Spacing ;
  //=====================================================================
  boolean MODEQU()
    {
      if (saved("MODEQU",MODEQU)) return reuse();
      if (!next("%=")) return reject();
      Spacing();
      return accept();
    }

  Cache MODEQU = new Cache();

  //=====================================================================
  //  NOTEQUAL = "!=" Spacing ;
  //=====================================================================
  boolean NOTEQUAL()
    {
      if (saved("NOTEQUAL",NOTEQUAL)) return reuse();
      if (!next("!=")) return reject();
      Spacing();
      return accept();
    }

  Cache NOTEQUAL = new Cache();

  //=====================================================================
  //  OR = "|" ![=|] Spacing ;
  //=====================================================================
  boolean OR()
    {
      if (saved("OR",OR)) return reuse();
      if (!next('|') || !aheadNotIn("=|")) return reject();
      Spacing();
      return accept();
    }

  Cache OR = new Cache();

  //=====================================================================
  //  OREQU = "|=" Spacing ;
  //=====================================================================
  boolean OREQU()
    {
      if (saved("OREQU",OREQU)) return reuse();
      if (!next("|=")) return reject();
      Spacing();
      return accept();
    }

  Cache OREQU = new Cache();

  //=====================================================================
  //  OROR = "||" Spacing ;
  //=====================================================================
  boolean OROR()
    {
      if (saved("OROR",OROR)) return reuse();
      if (!next("||")) return reject();
      Spacing();
      return accept();
    }

  Cache OROR = new Cache();

  //=====================================================================
  //  PLUS = "+" ![=+] Spacing ;
  //=====================================================================
  boolean PLUS()
    {
      if (saved("PLUS",PLUS)) return reuse();
      if (!next('+') || !aheadNotIn("=+")) return reject();
      Spacing();
      return accept();
    }

  Cache PLUS = new Cache();

  //=====================================================================
  //  PLUSEQU = "+=" Spacing ;
  //=====================================================================
  boolean PLUSEQU()
    {
      if (saved("PLUSEQU",PLUSEQU)) return reuse();
      if (!next("+=")) return reject();
      Spacing();
      return accept();
    }

  Cache PLUSEQU = new Cache();

  //=====================================================================
  //  QUERY = "?" Spacing ;
  //=====================================================================
  boolean QUERY()
    {
      if (saved("QUERY",QUERY)) return reuse();
      if (!next('?')) return reject();
      Spacing();
      return accept();
    }

  Cache QUERY = new Cache();

  //=====================================================================
  //  RPOINT = ">" Spacing ;
  //=====================================================================
  boolean RPOINT()
    {
      if (saved("RPOINT",RPOINT)) return reuse();
      if (!next('>')) return reject();
      Spacing();
      return accept();
    }

  Cache RPOINT = new Cache();

  //=====================================================================
  //  SL = "<<" ![=] Spacing ;
  //=====================================================================
  boolean SL()
    {
      if (saved("SL",SL)) return reuse();
      if (!next("<<") || !aheadNot('=')) return reject();
      Spacing();
      return accept();
    }

  Cache SL = new Cache();

  //=====================================================================
  //  SLEQU = "<<=" Spacing ;
  //=====================================================================
  boolean SLEQU()
    {
      if (saved("SLEQU",SLEQU)) return reuse();
      if (!next("<<=")) return reject();
      Spacing();
      return accept();
    }

  Cache SLEQU = new Cache();

  //=====================================================================
  //  SR = ">>" ![=>] Spacing ;
  //=====================================================================
  boolean SR()
    {
      if (saved("SR",SR)) return reuse();
      if (!next(">>") || !aheadNotIn("=>")) return reject();
      Spacing();
      return accept();
    }

  Cache SR = new Cache();

  //=====================================================================
  //  SREQU = ">>=" Spacing ;
  //=====================================================================
  boolean SREQU()
    {
      if (saved("SREQU",SREQU)) return reuse();
      if (!next(">>=")) return reject();
      Spacing();
      return accept();
    }

  Cache SREQU = new Cache();

  //=====================================================================
  //  STAR = "*" ![=] Spacing ;
  //=====================================================================
  boolean STAR()
    {
      if (saved("STAR",STAR)) return reuse();
      if (!next('*') || !aheadNot('=')) return reject();
      Spacing();
      return accept();
    }

  Cache STAR = new Cache();

  //=====================================================================
  //  STAREQU = "*=" Spacing ;
  //=====================================================================
  boolean STAREQU()
    {
      if (saved("STAREQU",STAREQU)) return reuse();
      if (!next("*=")) return reject();
      Spacing();
      return accept();
    }

  Cache STAREQU = new Cache();

  //=====================================================================
  //  TILDE = "~" Spacing ;
  //=====================================================================
  boolean TILDE()
    {
      if (saved("TILDE",TILDE)) return reuse();
      if (!next('~')) return reject();
      Spacing();
      return accept();
    }

  Cache TILDE = new Cache();

  //=====================================================================
  //  PrimitiveType = Annotation* NumericType / Annotation* BOOLEAN ;
  //=====================================================================
  boolean PrimitiveType()
    {
      if (saved("PrimitiveType",PrimitiveType)) return reuse();
      if (PrimitiveType_0() || PrimitiveType_2()) return accept();
      return reject();
    }

  Cache PrimitiveType = new Cache();

  //-------------------------------------------------------------------
  //  PrimitiveType_0 = Annotation* NumericType
  //-------------------------------------------------------------------
  boolean PrimitiveType_0()
    {
      if (saved("PrimitiveType_0",PrimitiveType_0)) return reuseInner();
      while (Annotation());
      if (!NumericType()) return rejectInner();
      return acceptInner();
    }

  Cache PrimitiveType_0 = new Cache();

  //-------------------------------------------------------------------
  //  PrimitiveType_2 = Annotation* BOOLEAN
  //-------------------------------------------------------------------
  boolean PrimitiveType_2()
    {
      if (saved("PrimitiveType_2",PrimitiveType_2)) return reuseInner();
      while (Annotation());
      if (!BOOLEAN()) return rejectInner();
      return acceptInner();
    }

  Cache PrimitiveType_2 = new Cache();

  //=====================================================================
  //  NumericType = IntegralType / FloatingPointType ;
  //=====================================================================
  boolean NumericType()
    {
      if (saved("NumericType",NumericType)) return reuse();
      if (IntegralType() || FloatingPointType()) return accept();
      return reject();
    }

  Cache NumericType = new Cache();

  //=====================================================================
  //  IntegralType = BYTE / SHORT / INT / LONG / CHAR ;
  //=====================================================================
  boolean IntegralType()
    {
      if (saved("IntegralType",IntegralType)) return reuse();
      if (BYTE() || SHORT() || INT() || LONG()) return accept();
      if (CHAR()) return accept();
      return reject();
    }

  Cache IntegralType = new Cache();

  //=====================================================================
  //  FloatingPointType = FLOAT / DOUBLE ;
  //=====================================================================
  boolean FloatingPointType()
    {
      if (saved("FloatingPointType",FloatingPointType)) return reuse();
      if (FLOAT() || DOUBLE()) return accept();
      return reject();
    }

  Cache FloatingPointType = new Cache();

  //=====================================================================
  //  ReferenceType = ArrayType / ClassType / TypeVariable ;
  //=====================================================================
  boolean ReferenceType()
    {
      if (saved("ReferenceType",ReferenceType)) return reuse();
      if (ArrayType() || ClassType() || TypeVariable()) return accept();
      return reject();
    }

  Cache ReferenceType = new Cache();

  //=====================================================================
  //  ClassType = (Annotation* TypeIdentifier TypeArguments? / Name DOT
  //    Annotation* TypeIdentifier TypeArguments?) (DOT Annotation*
  //    TypeIdentifier TypeArguments?)* ;
  //=====================================================================
  boolean ClassType()
    {
      if (saved("ClassType",ClassType)) return reuse();
      if (!ClassType_2()
       && !ClassType_5()
         ) return reject();
      while (ClassType_9());
      return accept();
    }

  Cache ClassType = new Cache();

  //-------------------------------------------------------------------
  //  ClassType_2 = Annotation* TypeIdentifier TypeArguments?
  //-------------------------------------------------------------------
  boolean ClassType_2()
    {
      if (saved("ClassType_2",ClassType_2)) return reuseInner();
      while (Annotation());
      if (!TypeIdentifier()) return rejectInner();
      TypeArguments();
      return acceptInner();
    }

  Cache ClassType_2 = new Cache();

  //-------------------------------------------------------------------
  //  ClassType_5 = Name DOT Annotation* TypeIdentifier TypeArguments?
  //-------------------------------------------------------------------
  boolean ClassType_5()
    {
      if (saved("ClassType_5",ClassType_5)) return reuseInner();
      if (!Name() || !DOT()) return rejectInner();
      while (Annotation());
      if (!TypeIdentifier()) return rejectInner();
      TypeArguments();
      return acceptInner();
    }

  Cache ClassType_5 = new Cache();

  //-------------------------------------------------------------------
  //  ClassType_9 = DOT Annotation* TypeIdentifier TypeArguments?
  //-------------------------------------------------------------------
  boolean ClassType_9()
    {
      if (saved("ClassType_9",ClassType_9)) return reuseInner();
      if (!DOT()) return rejectInner();
      while (Annotation());
      if (!TypeIdentifier()) return rejectInner();
      TypeArguments();
      return acceptInner();
    }

  Cache ClassType_9 = new Cache();

  //=====================================================================
  //  TypeVariable = Annotation* TypeIdentifier ;
  //=====================================================================
  boolean TypeVariable()
    {
      if (saved("TypeVariable",TypeVariable)) return reuse();
      while (Annotation());
      if (!TypeIdentifier()) return reject();
      return accept();
    }

  Cache TypeVariable = new Cache();

  //=====================================================================
  //  ArrayType = PrimitiveType Dims / ClassType Dims / TypeVariable Dims
  //    ;
  //=====================================================================
  boolean ArrayType()
    {
      if (saved("ArrayType",ArrayType)) return reuse();
      if (ArrayType_0() || ArrayType_1() || ArrayType_2()) return accept();
      return reject();
    }

  Cache ArrayType = new Cache();

  //-------------------------------------------------------------------
  //  ArrayType_0 = PrimitiveType Dims
  //-------------------------------------------------------------------
  boolean ArrayType_0()
    {
      if (saved("ArrayType_0",ArrayType_0)) return reuseInner();
      if (!PrimitiveType() || !Dims()) return rejectInner();
      return acceptInner();
    }

  Cache ArrayType_0 = new Cache();

  //-------------------------------------------------------------------
  //  ArrayType_1 = ClassType Dims
  //-------------------------------------------------------------------
  boolean ArrayType_1()
    {
      if (saved("ArrayType_1",ArrayType_1)) return reuseInner();
      if (!ClassType() || !Dims()) return rejectInner();
      return acceptInner();
    }

  Cache ArrayType_1 = new Cache();

  //-------------------------------------------------------------------
  //  ArrayType_2 = TypeVariable Dims
  //-------------------------------------------------------------------
  boolean ArrayType_2()
    {
      if (saved("ArrayType_2",ArrayType_2)) return reuseInner();
      if (!TypeVariable() || !Dims()) return rejectInner();
      return acceptInner();
    }

  Cache ArrayType_2 = new Cache();

  //=====================================================================
  //  Dims = Annotation* LBRK RBRK (Annotation* LBRK RBRK)* ;
  //=====================================================================
  boolean Dims()
    {
      if (saved("Dims",Dims)) return reuse();
      while (Annotation());
      if (!LBRK() || !RBRK()) return reject();
      while (Dims_3());
      return accept();
    }

  Cache Dims = new Cache();

  //-------------------------------------------------------------------
  //  Dims_3 = Annotation* LBRK RBRK
  //-------------------------------------------------------------------
  boolean Dims_3()
    {
      if (saved("Dims_3",Dims_3)) return reuseInner();
      while (Annotation());
      if (!LBRK() || !RBRK()) return rejectInner();
      return acceptInner();
    }

  Cache Dims_3 = new Cache();

  //=====================================================================
  //  TypeParameter = TypeParameterModifier* Identifier TypeBound? ;
  //=====================================================================
  boolean TypeParameter()
    {
      if (saved("TypeParameter",TypeParameter)) return reuse();
      while (TypeParameterModifier());
      if (!Identifier()) return reject();
      TypeBound();
      return accept();
    }

  Cache TypeParameter = new Cache();

  //=====================================================================
  //  TypeParameterModifier = Annotation ;
  //=====================================================================
  boolean TypeParameterModifier()
    {
      if (saved("TypeParameterModifier",TypeParameterModifier)) return reuse();
      if (!Annotation()) return reject();
      return accept();
    }

  Cache TypeParameterModifier = new Cache();

  //=====================================================================
  //  TypeBound = EXTENDS ClassType AdditionalBound* / EXTENDS
  //    TypeVariable ;
  //=====================================================================
  boolean TypeBound()
    {
      if (saved("TypeBound",TypeBound)) return reuse();
      if (TypeBound_0() || TypeBound_2()) return accept();
      return reject();
    }

  Cache TypeBound = new Cache();

  //-------------------------------------------------------------------
  //  TypeBound_0 = EXTENDS ClassType AdditionalBound*
  //-------------------------------------------------------------------
  boolean TypeBound_0()
    {
      if (saved("TypeBound_0",TypeBound_0)) return reuseInner();
      if (!EXTENDS() || !ClassType()) return rejectInner();
      while (AdditionalBound());
      return acceptInner();
    }

  Cache TypeBound_0 = new Cache();

  //-------------------------------------------------------------------
  //  TypeBound_2 = EXTENDS TypeVariable
  //-------------------------------------------------------------------
  boolean TypeBound_2()
    {
      if (saved("TypeBound_2",TypeBound_2)) return reuseInner();
      if (!EXTENDS() || !TypeVariable()) return rejectInner();
      return acceptInner();
    }

  Cache TypeBound_2 = new Cache();

  //=====================================================================
  //  AdditionalBound = AND ClassType ;
  //=====================================================================
  boolean AdditionalBound()
    {
      if (saved("AdditionalBound",AdditionalBound)) return reuse();
      if (!AND() || !ClassType()) return reject();
      return accept();
    }

  Cache AdditionalBound = new Cache();

  //=====================================================================
  //  TypeArguments = LPOINT TypeArgumentList RPOINT ;
  //=====================================================================
  boolean TypeArguments()
    {
      if (saved("TypeArguments",TypeArguments)) return reuse();
      if (!LPOINT() || !TypeArgumentList() || !RPOINT()) return reject();
      return accept();
    }

  Cache TypeArguments = new Cache();

  //=====================================================================
  //  TypeArgumentList = TypeArgument (COMMA TypeArgument)* ;
  //=====================================================================
  boolean TypeArgumentList()
    {
      if (saved("TypeArgumentList",TypeArgumentList)) return reuse();
      if (!TypeArgument()) return reject();
      while (TypeArgumentList_2());
      return accept();
    }

  Cache TypeArgumentList = new Cache();

  //-------------------------------------------------------------------
  //  TypeArgumentList_2 = COMMA TypeArgument
  //-------------------------------------------------------------------
  boolean TypeArgumentList_2()
    {
      if (saved("TypeArgumentList_2",TypeArgumentList_2)) return reuseInner();
      if (!COMMA() || !TypeArgument()) return rejectInner();
      return acceptInner();
    }

  Cache TypeArgumentList_2 = new Cache();

  //=====================================================================
  //  TypeArgument = ReferenceType / Wildcard ;
  //=====================================================================
  boolean TypeArgument()
    {
      if (saved("TypeArgument",TypeArgument)) return reuse();
      if (ReferenceType() || Wildcard()) return accept();
      return reject();
    }

  Cache TypeArgument = new Cache();

  //=====================================================================
  //  Wildcard = Annotation* QUERY WildcardBounds? ;
  //=====================================================================
  boolean Wildcard()
    {
      if (saved("Wildcard",Wildcard)) return reuse();
      while (Annotation());
      if (!QUERY()) return reject();
      WildcardBounds();
      return accept();
    }

  Cache Wildcard = new Cache();

  //=====================================================================
  //  WildcardBounds = EXTENDS ReferenceType / SUPER ReferenceType ;
  //=====================================================================
  boolean WildcardBounds()
    {
      if (saved("WildcardBounds",WildcardBounds)) return reuse();
      if (WildcardBounds_0() || WildcardBounds_1()) return accept();
      return reject();
    }

  Cache WildcardBounds = new Cache();

  //-------------------------------------------------------------------
  //  WildcardBounds_0 = EXTENDS ReferenceType
  //-------------------------------------------------------------------
  boolean WildcardBounds_0()
    {
      if (saved("WildcardBounds_0",WildcardBounds_0)) return reuseInner();
      if (!EXTENDS() || !ReferenceType()) return rejectInner();
      return acceptInner();
    }

  Cache WildcardBounds_0 = new Cache();

  //-------------------------------------------------------------------
  //  WildcardBounds_1 = SUPER ReferenceType
  //-------------------------------------------------------------------
  boolean WildcardBounds_1()
    {
      if (saved("WildcardBounds_1",WildcardBounds_1)) return reuseInner();
      if (!SUPER() || !ReferenceType()) return rejectInner();
      return acceptInner();
    }

  Cache WildcardBounds_1 = new Cache();

  //=====================================================================
  //  Name = Identifier (DOT Identifier)* ;
  //=====================================================================
  boolean Name()
    {
      if (saved("Name",Name)) return reuse();
      if (!Identifier()) return reject();
      while (Name_2());
      return accept();
    }

  Cache Name = new Cache();

  //-------------------------------------------------------------------
  //  Name_2 = DOT Identifier
  //-------------------------------------------------------------------
  boolean Name_2()
    {
      if (saved("Name_2",Name_2)) return reuseInner();
      if (!DOT() || !Identifier()) return rejectInner();
      return acceptInner();
    }

  Cache Name_2 = new Cache();

  //=====================================================================
  //  TypeName = TypeIdentifier (DOT TypeIdentifier)* ;
  //=====================================================================
  boolean TypeName()
    {
      if (saved("TypeName",TypeName)) return reuse();
      if (!TypeIdentifier()) return reject();
      while (TypeName_2());
      return accept();
    }

  Cache TypeName = new Cache();

  //-------------------------------------------------------------------
  //  TypeName_2 = DOT TypeIdentifier
  //-------------------------------------------------------------------
  boolean TypeName_2()
    {
      if (saved("TypeName_2",TypeName_2)) return reuseInner();
      if (!DOT() || !TypeIdentifier()) return rejectInner();
      return acceptInner();
    }

  Cache TypeName_2 = new Cache();

  //=====================================================================
  //  CompilationUnit = ModularCompilationUnit / OrdinaryCompilationUnit
  //    ;
  //=====================================================================
  boolean CompilationUnit()
    {
      if (saved("CompilationUnit",CompilationUnit)) return reuse();
      if (ModularCompilationUnit() || OrdinaryCompilationUnit()) return accept();
      return reject();
    }

  Cache CompilationUnit = new Cache();

  //=====================================================================
  //  OrdinaryCompilationUnit = PackageDeclaration? ImportDeclaration*
  //    TypeDeclaration* ;
  //=====================================================================
  boolean OrdinaryCompilationUnit()
    {
      if (saved("OrdinaryCompilationUnit",OrdinaryCompilationUnit)) return reuse();
      PackageDeclaration();
      while (ImportDeclaration());
      while (TypeDeclaration());
      return accept();
    }

  Cache OrdinaryCompilationUnit = new Cache();

  //=====================================================================
  //  ModularCompilationUnit = ImportDeclaration* ModuleDeclaration ;
  //=====================================================================
  boolean ModularCompilationUnit()
    {
      if (saved("ModularCompilationUnit",ModularCompilationUnit)) return reuse();
      while (ImportDeclaration());
      if (!ModuleDeclaration()) return reject();
      return accept();
    }

  Cache ModularCompilationUnit = new Cache();

  //=====================================================================
  //  PackageDeclaration = PackageModifier* PACKAGE Identifier (DOT
  //    Identifier)* SEMI ;
  //=====================================================================
  boolean PackageDeclaration()
    {
      if (saved("PackageDeclaration",PackageDeclaration)) return reuse();
      while (PackageModifier());
      if (!PACKAGE() || !Identifier()) return reject();
      while (Name_2());
      if (!SEMI()) return reject();
      return accept();
    }

  Cache PackageDeclaration = new Cache();

  //=====================================================================
  //  PackageModifier = Annotation ;
  //=====================================================================
  boolean PackageModifier()
    {
      if (saved("PackageModifier",PackageModifier)) return reuse();
      if (!Annotation()) return reject();
      return accept();
    }

  Cache PackageModifier = new Cache();

  //=====================================================================
  //  ImportDeclaration = SingleTypeImportDeclaration /
  //    TypeImportOnDemandDeclaration / SingleStaticImportDeclaration /
  //    StaticImportOnDemandDeclaration / SEMI ;
  //=====================================================================
  boolean ImportDeclaration()
    {
      if (saved("ImportDeclaration",ImportDeclaration)) return reuse();
      if (SingleTypeImportDeclaration() || TypeImportOnDemandDeclaration() || SingleStaticImportDeclaration() || StaticImportOnDemandDeclaration()) return accept();
      if (SEMI()) return accept();
      return reject();
    }

  Cache ImportDeclaration = new Cache();

  //=====================================================================
  //  SingleTypeImportDeclaration = IMPORT TypeName SEMI ;
  //=====================================================================
  boolean SingleTypeImportDeclaration()
    {
      if (saved("SingleTypeImportDeclaration",SingleTypeImportDeclaration)) return reuse();
      if (!IMPORT() || !TypeName() || !SEMI()) return reject();
      return accept();
    }

  Cache SingleTypeImportDeclaration = new Cache();

  //=====================================================================
  //  TypeImportOnDemandDeclaration = IMPORT Name DOT STAR SEMI ;
  //=====================================================================
  boolean TypeImportOnDemandDeclaration()
    {
      if (saved("TypeImportOnDemandDeclaration",TypeImportOnDemandDeclaration)) return reuse();
      if (!IMPORT() || !Name() || !DOT() || !STAR()) return reject();
      if (!SEMI()) return reject();
      return accept();
    }

  Cache TypeImportOnDemandDeclaration = new Cache();

  //=====================================================================
  //  SingleStaticImportDeclaration = IMPORT STATIC TypeName (DOT
  //    Identifier)? SEMI ;
  //=====================================================================
  boolean SingleStaticImportDeclaration()
    {
      if (saved("SingleStaticImportDeclaration",SingleStaticImportDeclaration)) return reuse();
      if (!IMPORT() || !STATIC() || !TypeName()) return reject();
      Name_2();
      if (!SEMI()) return reject();
      return accept();
    }

  Cache SingleStaticImportDeclaration = new Cache();

  //=====================================================================
  //  StaticImportOnDemandDeclaration = IMPORT STATIC TypeName DOT STAR
  //    SEMI ;
  //=====================================================================
  boolean StaticImportOnDemandDeclaration()
    {
      if (saved("StaticImportOnDemandDeclaration",StaticImportOnDemandDeclaration)) return reuse();
      if (!IMPORT() || !STATIC() || !TypeName() || !DOT()) return reject();
      if (!STAR()) return reject();
      if (!SEMI()) return reject();
      return accept();
    }

  Cache StaticImportOnDemandDeclaration = new Cache();

  //=====================================================================
  //  TypeDeclaration = ClassDeclaration / InterfaceDeclaration / SEMI ;
  //=====================================================================
  boolean TypeDeclaration()
    {
      if (saved("TypeDeclaration",TypeDeclaration)) return reuse();
      if (ClassDeclaration() || InterfaceDeclaration() || SEMI()) return accept();
      return reject();
    }

  Cache TypeDeclaration = new Cache();

  //=====================================================================
  //  ModuleDeclaration = Annotation* OPEN? MODULE Identifier (DOT
  //    Identifier)* LWING ModuleDirective* RWING ;
  //=====================================================================
  boolean ModuleDeclaration()
    {
      if (saved("ModuleDeclaration",ModuleDeclaration)) return reuse();
      while (Annotation());
      OPEN();
      if (!MODULE() || !Identifier()) return reject();
      while (Name_2());
      if (!LWING()) return reject();
      while (ModuleDirective());
      if (!RWING()) return reject();
      return accept();
    }

  Cache ModuleDeclaration = new Cache();

  //=====================================================================
  //  ModuleDirective = REQUIRES RequiresModifier* Name SEMI / EXPORTS
  //    Name (TO Name (COMMA Name)*)? SEMI / OPENS Name (TO Name (COMMA
  //    Name)*)? SEMI / USES TypeName SEMI / PROVIDES TypeName WITH
  //    TypeName (COMMA TypeName)* SEMI ;
  //=====================================================================
  boolean ModuleDirective()
    {
      if (saved("ModuleDirective",ModuleDirective)) return reuse();
      if (ModuleDirective_0() || ModuleDirective_2() || ModuleDirective_7() || ModuleDirective_12()) return accept();
      if (ModuleDirective_13()) return accept();
      return reject();
    }

  Cache ModuleDirective = new Cache();

  //-------------------------------------------------------------------
  //  ModuleDirective_0 = REQUIRES RequiresModifier* Name SEMI
  //-------------------------------------------------------------------
  boolean ModuleDirective_0()
    {
      if (saved("ModuleDirective_0",ModuleDirective_0)) return reuseInner();
      if (!REQUIRES()) return rejectInner();
      while (RequiresModifier());
      if (!Name() || !SEMI()) return rejectInner();
      return acceptInner();
    }

  Cache ModuleDirective_0 = new Cache();

  //-------------------------------------------------------------------
  //  ModuleDirective_2 = EXPORTS Name (TO Name (COMMA Name)*)? SEMI
  //-------------------------------------------------------------------
  boolean ModuleDirective_2()
    {
      if (saved("ModuleDirective_2",ModuleDirective_2)) return reuseInner();
      if (!EXPORTS() || !Name()) return rejectInner();
      ModuleDirective_4();
      if (!SEMI()) return rejectInner();
      return acceptInner();
    }

  Cache ModuleDirective_2 = new Cache();

  //-------------------------------------------------------------------
  //  ModuleDirective_7 = OPENS Name (TO Name (COMMA Name)*)? SEMI
  //-------------------------------------------------------------------
  boolean ModuleDirective_7()
    {
      if (saved("ModuleDirective_7",ModuleDirective_7)) return reuseInner();
      if (!OPENS() || !Name()) return rejectInner();
      ModuleDirective_4();
      if (!SEMI()) return rejectInner();
      return acceptInner();
    }

  Cache ModuleDirective_7 = new Cache();

  //-------------------------------------------------------------------
  //  ModuleDirective_12 = USES TypeName SEMI
  //-------------------------------------------------------------------
  boolean ModuleDirective_12()
    {
      if (saved("ModuleDirective_12",ModuleDirective_12)) return reuseInner();
      if (!USES() || !TypeName() || !SEMI()) return rejectInner();
      return acceptInner();
    }

  Cache ModuleDirective_12 = new Cache();

  //-------------------------------------------------------------------
  //  ModuleDirective_13 = PROVIDES TypeName WITH TypeName (COMMA
  //    TypeName)* SEMI
  //-------------------------------------------------------------------
  boolean ModuleDirective_13()
    {
      if (saved("ModuleDirective_13",ModuleDirective_13)) return reuseInner();
      if (!PROVIDES() || !TypeName() || !WITH() || !TypeName()) return rejectInner();
      while (ModuleDirective_15());
      if (!SEMI()) return rejectInner();
      return acceptInner();
    }

  Cache ModuleDirective_13 = new Cache();

  //-------------------------------------------------------------------
  //  ModuleDirective_4 = TO Name (COMMA Name)*
  //-------------------------------------------------------------------
  boolean ModuleDirective_4()
    {
      if (saved("ModuleDirective_4",ModuleDirective_4)) return reuseInner();
      if (!TO() || !Name()) return rejectInner();
      while (ModuleDirective_6());
      return acceptInner();
    }

  Cache ModuleDirective_4 = new Cache();

  //-------------------------------------------------------------------
  //  ModuleDirective_15 = COMMA TypeName
  //-------------------------------------------------------------------
  boolean ModuleDirective_15()
    {
      if (saved("ModuleDirective_15",ModuleDirective_15)) return reuseInner();
      if (!COMMA() || !TypeName()) return rejectInner();
      return acceptInner();
    }

  Cache ModuleDirective_15 = new Cache();

  //-------------------------------------------------------------------
  //  ModuleDirective_6 = COMMA Name
  //-------------------------------------------------------------------
  boolean ModuleDirective_6()
    {
      if (saved("ModuleDirective_6",ModuleDirective_6)) return reuseInner();
      if (!COMMA() || !Name()) return rejectInner();
      return acceptInner();
    }

  Cache ModuleDirective_6 = new Cache();

  //=====================================================================
  //  RequiresModifier = TRANSITIVE / STATIC ;
  //=====================================================================
  boolean RequiresModifier()
    {
      if (saved("RequiresModifier",RequiresModifier)) return reuse();
      if (TRANSITIVE() || STATIC()) return accept();
      return reject();
    }

  Cache RequiresModifier = new Cache();

  //=====================================================================
  //  ClassDeclaration = NormalClassDeclaration / EnumDeclaration ;
  //=====================================================================
  boolean ClassDeclaration()
    {
      if (saved("ClassDeclaration",ClassDeclaration)) return reuse();
      if (NormalClassDeclaration() || EnumDeclaration()) return accept();
      return reject();
    }

  Cache ClassDeclaration = new Cache();

  //=====================================================================
  //  NormalClassDeclaration = ClassModifier* CLASS Identifier
  //    TypeParameters? Superclass? Superinterfaces? ClassBody ;
  //=====================================================================
  boolean NormalClassDeclaration()
    {
      if (saved("NormalClassDeclaration",NormalClassDeclaration)) return reuse();
      while (ClassModifier());
      if (!CLASS() || !Identifier()) return reject();
      TypeParameters();
      Superclass();
      Superinterfaces();
      if (!ClassBody()) return reject();
      return accept();
    }

  Cache NormalClassDeclaration = new Cache();

  //=====================================================================
  //  ClassModifier = Annotation / PUBLIC / PROTECTED / PRIVATE /
  //    ABSTRACT / STATIC / FINAL / STRICTFP ;
  //=====================================================================
  boolean ClassModifier()
    {
      if (saved("ClassModifier",ClassModifier)) return reuse();
      if (Annotation() || PUBLIC() || PROTECTED() || PRIVATE()) return accept();
      if (ABSTRACT()) return accept();
      if (STATIC()) return accept();
      if (FINAL()) return accept();
      if (STRICTFP()) return accept();
      return reject();
    }

  Cache ClassModifier = new Cache();

  //=====================================================================
  //  TypeParameters = LPOINT TypeParameterList RPOINT ;
  //=====================================================================
  boolean TypeParameters()
    {
      if (saved("TypeParameters",TypeParameters)) return reuse();
      if (!LPOINT() || !TypeParameterList() || !RPOINT()) return reject();
      return accept();
    }

  Cache TypeParameters = new Cache();

  //=====================================================================
  //  TypeParameterList = TypeParameter (COMMA TypeParameter)* ;
  //=====================================================================
  boolean TypeParameterList()
    {
      if (saved("TypeParameterList",TypeParameterList)) return reuse();
      if (!TypeParameter()) return reject();
      while (TypeParameterList_2());
      return accept();
    }

  Cache TypeParameterList = new Cache();

  //-------------------------------------------------------------------
  //  TypeParameterList_2 = COMMA TypeParameter
  //-------------------------------------------------------------------
  boolean TypeParameterList_2()
    {
      if (saved("TypeParameterList_2",TypeParameterList_2)) return reuseInner();
      if (!COMMA() || !TypeParameter()) return rejectInner();
      return acceptInner();
    }

  Cache TypeParameterList_2 = new Cache();

  //=====================================================================
  //  Superclass = EXTENDS ClassType ;
  //=====================================================================
  boolean Superclass()
    {
      if (saved("Superclass",Superclass)) return reuse();
      if (!EXTENDS() || !ClassType()) return reject();
      return accept();
    }

  Cache Superclass = new Cache();

  //=====================================================================
  //  Superinterfaces = IMPLEMENTS InterfaceTypeList ;
  //=====================================================================
  boolean Superinterfaces()
    {
      if (saved("Superinterfaces",Superinterfaces)) return reuse();
      if (!IMPLEMENTS() || !InterfaceTypeList()) return reject();
      return accept();
    }

  Cache Superinterfaces = new Cache();

  //=====================================================================
  //  InterfaceTypeList = ClassType (COMMA ClassType)* ;
  //=====================================================================
  boolean InterfaceTypeList()
    {
      if (saved("InterfaceTypeList",InterfaceTypeList)) return reuse();
      if (!ClassType()) return reject();
      while (InterfaceTypeList_2());
      return accept();
    }

  Cache InterfaceTypeList = new Cache();

  //-------------------------------------------------------------------
  //  InterfaceTypeList_2 = COMMA ClassType
  //-------------------------------------------------------------------
  boolean InterfaceTypeList_2()
    {
      if (saved("InterfaceTypeList_2",InterfaceTypeList_2)) return reuseInner();
      if (!COMMA() || !ClassType()) return rejectInner();
      return acceptInner();
    }

  Cache InterfaceTypeList_2 = new Cache();

  //=====================================================================
  //  ClassBody = LWING ClassBodyDeclaration* RWING ;
  //=====================================================================
  boolean ClassBody()
    {
      if (saved("ClassBody",ClassBody)) return reuse();
      if (!LWING()) return reject();
      while (ClassBodyDeclaration());
      if (!RWING()) return reject();
      return accept();
    }

  Cache ClassBody = new Cache();

  //=====================================================================
  //  ClassBodyDeclaration = ClassMemberDeclaration / InstanceInitializer
  //    / StaticInitializer / ConstructorDeclaration ;
  //=====================================================================
  boolean ClassBodyDeclaration()
    {
      if (saved("ClassBodyDeclaration",ClassBodyDeclaration)) return reuse();
      if (ClassMemberDeclaration() || InstanceInitializer() || StaticInitializer() || ConstructorDeclaration()) return accept();
      return reject();
    }

  Cache ClassBodyDeclaration = new Cache();

  //=====================================================================
  //  ClassMemberDeclaration = FieldDeclaration / MethodDeclaration /
  //    ClassDeclaration / InterfaceDeclaration / SEMI ;
  //=====================================================================
  boolean ClassMemberDeclaration()
    {
      if (saved("ClassMemberDeclaration",ClassMemberDeclaration)) return reuse();
      if (FieldDeclaration() || MethodDeclaration() || ClassDeclaration() || InterfaceDeclaration()) return accept();
      if (SEMI()) return accept();
      return reject();
    }

  Cache ClassMemberDeclaration = new Cache();

  //=====================================================================
  //  FieldDeclaration = FieldModifier* UnannType VariableDeclaratorList
  //    SEMI ;
  //=====================================================================
  boolean FieldDeclaration()
    {
      if (saved("FieldDeclaration",FieldDeclaration)) return reuse();
      while (FieldModifier());
      if (!UnannType() || !VariableDeclaratorList() || !SEMI()) return reject();
      return accept();
    }

  Cache FieldDeclaration = new Cache();

  //=====================================================================
  //  VariableDeclaratorList = VariableDeclarator (COMMA
  //    VariableDeclarator)* ;
  //=====================================================================
  boolean VariableDeclaratorList()
    {
      if (saved("VariableDeclaratorList",VariableDeclaratorList)) return reuse();
      if (!VariableDeclarator()) return reject();
      while (VariableDeclaratorList_2());
      return accept();
    }

  Cache VariableDeclaratorList = new Cache();

  //-------------------------------------------------------------------
  //  VariableDeclaratorList_2 = COMMA VariableDeclarator
  //-------------------------------------------------------------------
  boolean VariableDeclaratorList_2()
    {
      if (saved("VariableDeclaratorList_2",VariableDeclaratorList_2)) return reuseInner();
      if (!COMMA() || !VariableDeclarator()) return rejectInner();
      return acceptInner();
    }

  Cache VariableDeclaratorList_2 = new Cache();

  //=====================================================================
  //  VariableDeclarator = VariableDeclaratorId (EQU
  //    VariableInitializer)? ;
  //=====================================================================
  boolean VariableDeclarator()
    {
      if (saved("VariableDeclarator",VariableDeclarator)) return reuse();
      if (!VariableDeclaratorId()) return reject();
      VariableDeclarator_2();
      return accept();
    }

  Cache VariableDeclarator = new Cache();

  //-------------------------------------------------------------------
  //  VariableDeclarator_2 = EQU VariableInitializer
  //-------------------------------------------------------------------
  boolean VariableDeclarator_2()
    {
      if (saved("VariableDeclarator_2",VariableDeclarator_2)) return reuseInner();
      if (!EQU() || !VariableInitializer()) return rejectInner();
      return acceptInner();
    }

  Cache VariableDeclarator_2 = new Cache();

  //=====================================================================
  //  VariableDeclaratorId = Identifier Dims? ;
  //=====================================================================
  boolean VariableDeclaratorId()
    {
      if (saved("VariableDeclaratorId",VariableDeclaratorId)) return reuse();
      if (!Identifier()) return reject();
      Dims();
      return accept();
    }

  Cache VariableDeclaratorId = new Cache();

  //=====================================================================
  //  VariableInitializer = Expression / ArrayInitializer ;
  //=====================================================================
  boolean VariableInitializer()
    {
      if (saved("VariableInitializer",VariableInitializer)) return reuse();
      if (Expression() || ArrayInitializer()) return accept();
      return reject();
    }

  Cache VariableInitializer = new Cache();

  //=====================================================================
  //  UnannType = UnannReferenceType / UnannPrimitiveType ;
  //=====================================================================
  boolean UnannType()
    {
      if (saved("UnannType",UnannType)) return reuse();
      if (UnannReferenceType() || UnannPrimitiveType()) return accept();
      return reject();
    }

  Cache UnannType = new Cache();

  //=====================================================================
  //  UnannPrimitiveType = NumericType / BOOLEAN ;
  //=====================================================================
  boolean UnannPrimitiveType()
    {
      if (saved("UnannPrimitiveType",UnannPrimitiveType)) return reuse();
      if (NumericType() || BOOLEAN()) return accept();
      return reject();
    }

  Cache UnannPrimitiveType = new Cache();

  //=====================================================================
  //  UnannReferenceType = UnannArrayType / UnannClassType /
  //    UnannTypeVariable ;
  //=====================================================================
  boolean UnannReferenceType()
    {
      if (saved("UnannReferenceType",UnannReferenceType)) return reuse();
      if (UnannArrayType() || UnannClassType() || UnannTypeVariable()) return accept();
      return reject();
    }

  Cache UnannReferenceType = new Cache();

  //=====================================================================
  //  UnannClassType = (TypeIdentifier TypeArguments? / Name DOT
  //    Annotation* TypeIdentifier TypeArguments?) (DOT Annotation*
  //    TypeIdentifier TypeArguments?)* ;
  //=====================================================================
  boolean UnannClassType()
    {
      if (saved("UnannClassType",UnannClassType)) return reuse();
      if (!UnannClassType_2()
       && !ClassType_5()
         ) return reject();
      while (ClassType_9());
      return accept();
    }

  Cache UnannClassType = new Cache();

  //-------------------------------------------------------------------
  //  UnannClassType_2 = TypeIdentifier TypeArguments?
  //-------------------------------------------------------------------
  boolean UnannClassType_2()
    {
      if (saved("UnannClassType_2",UnannClassType_2)) return reuseInner();
      if (!TypeIdentifier()) return rejectInner();
      TypeArguments();
      return acceptInner();
    }

  Cache UnannClassType_2 = new Cache();

  //=====================================================================
  //  UnannTypeVariable = TypeIdentifier ;
  //=====================================================================
  boolean UnannTypeVariable()
    {
      if (saved("UnannTypeVariable",UnannTypeVariable)) return reuse();
      if (!TypeIdentifier()) return reject();
      return accept();
    }

  Cache UnannTypeVariable = new Cache();

  //=====================================================================
  //  UnannArrayType = UnannPrimitiveType Dims / UnannClassType Dims /
  //    UnannTypeVariable Dims ;
  //=====================================================================
  boolean UnannArrayType()
    {
      if (saved("UnannArrayType",UnannArrayType)) return reuse();
      if (UnannArrayType_0() || UnannArrayType_1() || UnannArrayType_2()) return accept();
      return reject();
    }

  Cache UnannArrayType = new Cache();

  //-------------------------------------------------------------------
  //  UnannArrayType_0 = UnannPrimitiveType Dims
  //-------------------------------------------------------------------
  boolean UnannArrayType_0()
    {
      if (saved("UnannArrayType_0",UnannArrayType_0)) return reuseInner();
      if (!UnannPrimitiveType() || !Dims()) return rejectInner();
      return acceptInner();
    }

  Cache UnannArrayType_0 = new Cache();

  //-------------------------------------------------------------------
  //  UnannArrayType_1 = UnannClassType Dims
  //-------------------------------------------------------------------
  boolean UnannArrayType_1()
    {
      if (saved("UnannArrayType_1",UnannArrayType_1)) return reuseInner();
      if (!UnannClassType() || !Dims()) return rejectInner();
      return acceptInner();
    }

  Cache UnannArrayType_1 = new Cache();

  //-------------------------------------------------------------------
  //  UnannArrayType_2 = UnannTypeVariable Dims
  //-------------------------------------------------------------------
  boolean UnannArrayType_2()
    {
      if (saved("UnannArrayType_2",UnannArrayType_2)) return reuseInner();
      if (!UnannTypeVariable() || !Dims()) return rejectInner();
      return acceptInner();
    }

  Cache UnannArrayType_2 = new Cache();

  //=====================================================================
  //  FieldModifier = Annotation / PUBLIC / PROTECTED / PRIVATE / STATIC
  //    / FINAL / TRANSIENT / VOLATILE ;
  //=====================================================================
  boolean FieldModifier()
    {
      if (saved("FieldModifier",FieldModifier)) return reuse();
      if (Annotation() || PUBLIC() || PROTECTED() || PRIVATE()) return accept();
      if (STATIC()) return accept();
      if (FINAL()) return accept();
      if (TRANSIENT()) return accept();
      if (VOLATILE()) return accept();
      return reject();
    }

  Cache FieldModifier = new Cache();

  //=====================================================================
  //  MethodDeclaration = MethodModifier* MethodHeader MethodBody ;
  //=====================================================================
  boolean MethodDeclaration()
    {
      if (saved("MethodDeclaration",MethodDeclaration)) return reuse();
      while (MethodModifier());
      if (!MethodHeader() || !MethodBody()) return reject();
      return accept();
    }

  Cache MethodDeclaration = new Cache();

  //=====================================================================
  //  MethodHeader = Result MethodDeclarator Throws? / TypeParameters
  //    Annotation* Result MethodDeclarator Throws? ;
  //=====================================================================
  boolean MethodHeader()
    {
      if (saved("MethodHeader",MethodHeader)) return reuse();
      if (MethodHeader_0() || MethodHeader_2()) return accept();
      return reject();
    }

  Cache MethodHeader = new Cache();

  //-------------------------------------------------------------------
  //  MethodHeader_0 = Result MethodDeclarator Throws?
  //-------------------------------------------------------------------
  boolean MethodHeader_0()
    {
      if (saved("MethodHeader_0",MethodHeader_0)) return reuseInner();
      if (!Result() || !MethodDeclarator()) return rejectInner();
      Throws();
      return acceptInner();
    }

  Cache MethodHeader_0 = new Cache();

  //-------------------------------------------------------------------
  //  MethodHeader_2 = TypeParameters Annotation* Result
  //    MethodDeclarator Throws?
  //-------------------------------------------------------------------
  boolean MethodHeader_2()
    {
      if (saved("MethodHeader_2",MethodHeader_2)) return reuseInner();
      if (!TypeParameters()) return rejectInner();
      while (Annotation());
      if (!Result() || !MethodDeclarator()) return rejectInner();
      Throws();
      return acceptInner();
    }

  Cache MethodHeader_2 = new Cache();

  //=====================================================================
  //  MethodDeclarator = Identifier LPAR FormalParametersWithReceiver
  //    RPAR Dims? ;
  //=====================================================================
  boolean MethodDeclarator()
    {
      if (saved("MethodDeclarator",MethodDeclarator)) return reuse();
      if (!Identifier() || !LPAR()) return reject();
      FormalParametersWithReceiver();
      if (!RPAR()) return reject();
      Dims();
      return accept();
    }

  Cache MethodDeclarator = new Cache();

  //=====================================================================
  //  FormalParametersWithReceiver = ReceiverParameter (COMMA
  //    FormalParameterList)? / FormalParameterList? ;
  //=====================================================================
  boolean FormalParametersWithReceiver()
    {
      if (saved("FormalParametersWithReceiver",FormalParametersWithReceiver)) return reuse();
      if (FormalParametersWithReceiver_0() || FormalParametersWithReceiver_3()) return accept();
      return reject();
    }

  Cache FormalParametersWithReceiver = new Cache();

  //-------------------------------------------------------------------
  //  FormalParametersWithReceiver_0 = ReceiverParameter (COMMA
  //    FormalParameterList)?
  //-------------------------------------------------------------------
  boolean FormalParametersWithReceiver_0()
    {
      if (saved("FormalParametersWithReceiver_0",FormalParametersWithReceiver_0)) return reuseInner();
      if (!ReceiverParameter()) return rejectInner();
      FormalParametersWithReceiver_2();
      return acceptInner();
    }

  Cache FormalParametersWithReceiver_0 = new Cache();

  //-------------------------------------------------------------------
  //  FormalParametersWithReceiver_3 = FormalParameterList?
  //-------------------------------------------------------------------
  boolean FormalParametersWithReceiver_3()
    {
      if (saved("FormalParametersWithReceiver_3",FormalParametersWithReceiver_3)) return reuseInner();
      FormalParameterList();
      return acceptInner();
    }

  Cache FormalParametersWithReceiver_3 = new Cache();

  //-------------------------------------------------------------------
  //  FormalParametersWithReceiver_2 = COMMA FormalParameterList
  //-------------------------------------------------------------------
  boolean FormalParametersWithReceiver_2()
    {
      if (saved("FormalParametersWithReceiver_2",FormalParametersWithReceiver_2)) return reuseInner();
      if (!COMMA() || !FormalParameterList()) return rejectInner();
      return acceptInner();
    }

  Cache FormalParametersWithReceiver_2 = new Cache();

  //=====================================================================
  //  ReceiverParameter = Annotation* UnannType (Identifier DOT)? THIS ;
  //=====================================================================
  boolean ReceiverParameter()
    {
      if (saved("ReceiverParameter",ReceiverParameter)) return reuse();
      while (Annotation());
      if (!UnannType()) return reject();
      ReceiverParameter_3();
      if (!THIS()) return reject();
      return accept();
    }

  Cache ReceiverParameter = new Cache();

  //-------------------------------------------------------------------
  //  ReceiverParameter_3 = Identifier DOT
  //-------------------------------------------------------------------
  boolean ReceiverParameter_3()
    {
      if (saved("ReceiverParameter_3",ReceiverParameter_3)) return reuseInner();
      if (!Identifier() || !DOT()) return rejectInner();
      return acceptInner();
    }

  Cache ReceiverParameter_3 = new Cache();

  //=====================================================================
  //  FormalParameterList = FormalParameter (COMMA FormalParameter)* ;
  //=====================================================================
  boolean FormalParameterList()
    {
      if (saved("FormalParameterList",FormalParameterList)) return reuse();
      if (!FormalParameter()) return reject();
      while (FormalParameterList_2());
      return accept();
    }

  Cache FormalParameterList = new Cache();

  //-------------------------------------------------------------------
  //  FormalParameterList_2 = COMMA FormalParameter
  //-------------------------------------------------------------------
  boolean FormalParameterList_2()
    {
      if (saved("FormalParameterList_2",FormalParameterList_2)) return reuseInner();
      if (!COMMA() || !FormalParameter()) return rejectInner();
      return acceptInner();
    }

  Cache FormalParameterList_2 = new Cache();

  //=====================================================================
  //  FormalParameter = VariableModifier* UnannType VariableDeclaratorId
  //    / VariableArityParameter !COMMA ;
  //=====================================================================
  boolean FormalParameter()
    {
      if (saved("FormalParameter",FormalParameter)) return reuse();
      if (FormalParameter_0() || FormalParameter_2()) return accept();
      return reject();
    }

  Cache FormalParameter = new Cache();

  //-------------------------------------------------------------------
  //  FormalParameter_0 = VariableModifier* UnannType
  //    VariableDeclaratorId
  //-------------------------------------------------------------------
  boolean FormalParameter_0()
    {
      if (saved("FormalParameter_0",FormalParameter_0)) return reuseInner();
      while (VariableModifier());
      if (!UnannType() || !VariableDeclaratorId()) return rejectInner();
      return acceptInner();
    }

  Cache FormalParameter_0 = new Cache();

  //-------------------------------------------------------------------
  //  FormalParameter_2 = VariableArityParameter !COMMA
  //-------------------------------------------------------------------
  boolean FormalParameter_2()
    {
      if (saved("FormalParameter_2",FormalParameter_2)) return reuseInner();
      if (!VariableArityParameter() || !FormalParameter_3()) return rejectInner();
      return acceptInner();
    }

  Cache FormalParameter_2 = new Cache();

  //-------------------------------------------------------------------
  //  FormalParameter_3 = !COMMA
  //-------------------------------------------------------------------
  boolean FormalParameter_3()
    {
      if (saved("FormalParameter_3","not COMMA",FormalParameter_3)) return reusePred();
      if (COMMA()) return rejectPred();
      return acceptPred();
    }

  Cache FormalParameter_3 = new Cache();

  //=====================================================================
  //  VariableArityParameter = VariableModifier* UnannType Annotation*
  //    ELLIPSIS Identifier ;
  //=====================================================================
  boolean VariableArityParameter()
    {
      if (saved("VariableArityParameter",VariableArityParameter)) return reuse();
      while (VariableModifier());
      if (!UnannType()) return reject();
      while (Annotation());
      if (!ELLIPSIS() || !Identifier()) return reject();
      return accept();
    }

  Cache VariableArityParameter = new Cache();

  //=====================================================================
  //  VariableModifier = Annotation / FINAL ;
  //=====================================================================
  boolean VariableModifier()
    {
      if (saved("VariableModifier",VariableModifier)) return reuse();
      if (Annotation() || FINAL()) return accept();
      return reject();
    }

  Cache VariableModifier = new Cache();

  //=====================================================================
  //  MethodModifier = Annotation / PUBLIC / PROTECTED / PRIVATE /
  //    ABSTRACT / STATIC / FINAL / SYNCHRONIZED / NATIVE / STRICTFP ;
  //=====================================================================
  boolean MethodModifier()
    {
      if (saved("MethodModifier",MethodModifier)) return reuse();
      if (Annotation() || PUBLIC() || PROTECTED() || PRIVATE()) return accept();
      if (ABSTRACT()) return accept();
      if (STATIC()) return accept();
      if (FINAL()) return accept();
      if (SYNCHRONIZED()) return accept();
      if (NATIVE()) return accept();
      if (STRICTFP()) return accept();
      return reject();
    }

  Cache MethodModifier = new Cache();

  //=====================================================================
  //  Result = UnannType / VOID ;
  //=====================================================================
  boolean Result()
    {
      if (saved("Result",Result)) return reuse();
      if (UnannType() || VOID()) return accept();
      return reject();
    }

  Cache Result = new Cache();

  //=====================================================================
  //  Throws = THROWS ExceptionTypeList ;
  //=====================================================================
  boolean Throws()
    {
      if (saved("Throws",Throws)) return reuse();
      if (!THROWS() || !ExceptionTypeList()) return reject();
      return accept();
    }

  Cache Throws = new Cache();

  //=====================================================================
  //  ExceptionTypeList = ExceptionType (COMMA ExceptionType)* ;
  //=====================================================================
  boolean ExceptionTypeList()
    {
      if (saved("ExceptionTypeList",ExceptionTypeList)) return reuse();
      if (!ExceptionType()) return reject();
      while (ExceptionTypeList_2());
      return accept();
    }

  Cache ExceptionTypeList = new Cache();

  //-------------------------------------------------------------------
  //  ExceptionTypeList_2 = COMMA ExceptionType
  //-------------------------------------------------------------------
  boolean ExceptionTypeList_2()
    {
      if (saved("ExceptionTypeList_2",ExceptionTypeList_2)) return reuseInner();
      if (!COMMA() || !ExceptionType()) return rejectInner();
      return acceptInner();
    }

  Cache ExceptionTypeList_2 = new Cache();

  //=====================================================================
  //  ExceptionType = ClassType / TypeVariable ;
  //=====================================================================
  boolean ExceptionType()
    {
      if (saved("ExceptionType",ExceptionType)) return reuse();
      if (ClassType() || TypeVariable()) return accept();
      return reject();
    }

  Cache ExceptionType = new Cache();

  //=====================================================================
  //  MethodBody = Block / SEMI ;
  //=====================================================================
  boolean MethodBody()
    {
      if (saved("MethodBody",MethodBody)) return reuse();
      if (Block() || SEMI()) return accept();
      return reject();
    }

  Cache MethodBody = new Cache();

  //=====================================================================
  //  InstanceInitializer = Block ;
  //=====================================================================
  boolean InstanceInitializer()
    {
      if (saved("InstanceInitializer",InstanceInitializer)) return reuse();
      if (!Block()) return reject();
      return accept();
    }

  Cache InstanceInitializer = new Cache();

  //=====================================================================
  //  StaticInitializer = STATIC Block ;
  //=====================================================================
  boolean StaticInitializer()
    {
      if (saved("StaticInitializer",StaticInitializer)) return reuse();
      if (!STATIC() || !Block()) return reject();
      return accept();
    }

  Cache StaticInitializer = new Cache();

  //=====================================================================
  //  ConstructorDeclaration = ConstructorModifier* ConstructorDeclarator
  //    Throws? ConstructorBody ;
  //=====================================================================
  boolean ConstructorDeclaration()
    {
      if (saved("ConstructorDeclaration",ConstructorDeclaration)) return reuse();
      while (ConstructorModifier());
      if (!ConstructorDeclarator()) return reject();
      Throws();
      if (!ConstructorBody()) return reject();
      return accept();
    }

  Cache ConstructorDeclaration = new Cache();

  //=====================================================================
  //  ConstructorDeclarator = TypeParameters? SimpleTypeName LPAR
  //    FormalParametersWithReceiver RPAR ;
  //=====================================================================
  boolean ConstructorDeclarator()
    {
      if (saved("ConstructorDeclarator",ConstructorDeclarator)) return reuse();
      TypeParameters();
      if (!SimpleTypeName() || !LPAR()) return reject();
      FormalParametersWithReceiver();
      if (!RPAR()) return reject();
      return accept();
    }

  Cache ConstructorDeclarator = new Cache();

  //=====================================================================
  //  SimpleTypeName = TypeIdentifier ;
  //=====================================================================
  boolean SimpleTypeName()
    {
      if (saved("SimpleTypeName",SimpleTypeName)) return reuse();
      if (!TypeIdentifier()) return reject();
      return accept();
    }

  Cache SimpleTypeName = new Cache();

  //=====================================================================
  //  ConstructorModifier = Annotation / PUBLIC / PROTECTED / PRIVATE ;
  //=====================================================================
  boolean ConstructorModifier()
    {
      if (saved("ConstructorModifier",ConstructorModifier)) return reuse();
      if (Annotation() || PUBLIC() || PROTECTED() || PRIVATE()) return accept();
      return reject();
    }

  Cache ConstructorModifier = new Cache();

  //=====================================================================
  //  ConstructorBody = LWING ExplicitConstructorInvocation?
  //    BlockStatements? RWING ;
  //=====================================================================
  boolean ConstructorBody()
    {
      if (saved("ConstructorBody",ConstructorBody)) return reuse();
      if (!LWING()) return reject();
      ExplicitConstructorInvocation();
      BlockStatements();
      if (!RWING()) return reject();
      return accept();
    }

  Cache ConstructorBody = new Cache();

  //=====================================================================
  //  ExplicitConstructorInvocation = TypeArguments? THIS LPAR
  //    ArgumentList? RPAR SEMI / TypeArguments? SUPER LPAR ArgumentList?
  //    RPAR SEMI / Primary DOT TypeArguments? SUPER LPAR ArgumentList?
  //    RPAR SEMI / Name DOT TypeArguments? SUPER LPAR ArgumentList? RPAR
  //    SEMI ;
  //=====================================================================
  boolean ExplicitConstructorInvocation()
    {
      if (saved("ExplicitConstructorInvocation",ExplicitConstructorInvocation)) return reuse();
      if (ExplicitConstructorInvocation_0() || ExplicitConstructorInvocation_3() || ExplicitConstructorInvocation_6() || ExplicitConstructorInvocation_9()) return accept();
      return reject();
    }

  Cache ExplicitConstructorInvocation = new Cache();

  //-------------------------------------------------------------------
  //  ExplicitConstructorInvocation_0 = TypeArguments? THIS LPAR
  //    ArgumentList? RPAR SEMI
  //-------------------------------------------------------------------
  boolean ExplicitConstructorInvocation_0()
    {
      if (saved("ExplicitConstructorInvocation_0",ExplicitConstructorInvocation_0)) return reuseInner();
      TypeArguments();
      if (!THIS() || !LPAR()) return rejectInner();
      ArgumentList();
      if (!RPAR()) return rejectInner();
      if (!SEMI()) return rejectInner();
      return acceptInner();
    }

  Cache ExplicitConstructorInvocation_0 = new Cache();

  //-------------------------------------------------------------------
  //  ExplicitConstructorInvocation_3 = TypeArguments? SUPER LPAR
  //    ArgumentList? RPAR SEMI
  //-------------------------------------------------------------------
  boolean ExplicitConstructorInvocation_3()
    {
      if (saved("ExplicitConstructorInvocation_3",ExplicitConstructorInvocation_3)) return reuseInner();
      TypeArguments();
      if (!SUPER() || !LPAR()) return rejectInner();
      ArgumentList();
      if (!RPAR()) return rejectInner();
      if (!SEMI()) return rejectInner();
      return acceptInner();
    }

  Cache ExplicitConstructorInvocation_3 = new Cache();

  //-------------------------------------------------------------------
  //  ExplicitConstructorInvocation_6 = Primary DOT TypeArguments?
  //    SUPER LPAR ArgumentList? RPAR SEMI
  //-------------------------------------------------------------------
  boolean ExplicitConstructorInvocation_6()
    {
      if (saved("ExplicitConstructorInvocation_6",ExplicitConstructorInvocation_6)) return reuseInner();
      if (!Primary() || !DOT()) return rejectInner();
      TypeArguments();
      if (!SUPER()) return rejectInner();
      if (!LPAR()) return rejectInner();
      ArgumentList();
      if (!RPAR()) return rejectInner();
      if (!SEMI()) return rejectInner();
      return acceptInner();
    }

  Cache ExplicitConstructorInvocation_6 = new Cache();

  //-------------------------------------------------------------------
  //  ExplicitConstructorInvocation_9 = Name DOT TypeArguments? SUPER
  //    LPAR ArgumentList? RPAR SEMI
  //-------------------------------------------------------------------
  boolean ExplicitConstructorInvocation_9()
    {
      if (saved("ExplicitConstructorInvocation_9",ExplicitConstructorInvocation_9)) return reuseInner();
      if (!Name() || !DOT()) return rejectInner();
      TypeArguments();
      if (!SUPER()) return rejectInner();
      if (!LPAR()) return rejectInner();
      ArgumentList();
      if (!RPAR()) return rejectInner();
      if (!SEMI()) return rejectInner();
      return acceptInner();
    }

  Cache ExplicitConstructorInvocation_9 = new Cache();

  //=====================================================================
  //  EnumDeclaration = ClassModifier* ENUM TypeIdentifier
  //    Superinterfaces? EnumBody ;
  //=====================================================================
  boolean EnumDeclaration()
    {
      if (saved("EnumDeclaration",EnumDeclaration)) return reuse();
      while (ClassModifier());
      if (!ENUM() || !TypeIdentifier()) return reject();
      Superinterfaces();
      if (!EnumBody()) return reject();
      return accept();
    }

  Cache EnumDeclaration = new Cache();

  //=====================================================================
  //  EnumBody = LWING EnumConstantList? COMMA? EnumBodyDeclarations?
  //    RWING ;
  //=====================================================================
  boolean EnumBody()
    {
      if (saved("EnumBody",EnumBody)) return reuse();
      if (!LWING()) return reject();
      EnumConstantList();
      COMMA();
      EnumBodyDeclarations();
      if (!RWING()) return reject();
      return accept();
    }

  Cache EnumBody = new Cache();

  //=====================================================================
  //  EnumConstantList = EnumConstant (COMMA EnumConstant)* ;
  //=====================================================================
  boolean EnumConstantList()
    {
      if (saved("EnumConstantList",EnumConstantList)) return reuse();
      if (!EnumConstant()) return reject();
      while (EnumConstantList_2());
      return accept();
    }

  Cache EnumConstantList = new Cache();

  //-------------------------------------------------------------------
  //  EnumConstantList_2 = COMMA EnumConstant
  //-------------------------------------------------------------------
  boolean EnumConstantList_2()
    {
      if (saved("EnumConstantList_2",EnumConstantList_2)) return reuseInner();
      if (!COMMA() || !EnumConstant()) return rejectInner();
      return acceptInner();
    }

  Cache EnumConstantList_2 = new Cache();

  //=====================================================================
  //  EnumConstant = EnumConstantModifier* Identifier (LPAR ArgumentList?
  //    RPAR)? ClassBody? ;
  //=====================================================================
  boolean EnumConstant()
    {
      if (saved("EnumConstant",EnumConstant)) return reuse();
      while (EnumConstantModifier());
      if (!Identifier()) return reject();
      EnumConstant_3();
      ClassBody();
      return accept();
    }

  Cache EnumConstant = new Cache();

  //-------------------------------------------------------------------
  //  EnumConstant_3 = LPAR ArgumentList? RPAR
  //-------------------------------------------------------------------
  boolean EnumConstant_3()
    {
      if (saved("EnumConstant_3",EnumConstant_3)) return reuseInner();
      if (!LPAR()) return rejectInner();
      ArgumentList();
      if (!RPAR()) return rejectInner();
      return acceptInner();
    }

  Cache EnumConstant_3 = new Cache();

  //=====================================================================
  //  EnumConstantModifier = Annotation ;
  //=====================================================================
  boolean EnumConstantModifier()
    {
      if (saved("EnumConstantModifier",EnumConstantModifier)) return reuse();
      if (!Annotation()) return reject();
      return accept();
    }

  Cache EnumConstantModifier = new Cache();

  //=====================================================================
  //  EnumBodyDeclarations = SEMI ClassBodyDeclaration* ;
  //=====================================================================
  boolean EnumBodyDeclarations()
    {
      if (saved("EnumBodyDeclarations",EnumBodyDeclarations)) return reuse();
      if (!SEMI()) return reject();
      while (ClassBodyDeclaration());
      return accept();
    }

  Cache EnumBodyDeclarations = new Cache();

  //=====================================================================
  //  InterfaceDeclaration = NormalInterfaceDeclaration /
  //    AnnotationTypeDeclaration ;
  //=====================================================================
  boolean InterfaceDeclaration()
    {
      if (saved("InterfaceDeclaration",InterfaceDeclaration)) return reuse();
      if (NormalInterfaceDeclaration() || AnnotationTypeDeclaration()) return accept();
      return reject();
    }

  Cache InterfaceDeclaration = new Cache();

  //=====================================================================
  //  NormalInterfaceDeclaration = InterfaceModifier* INTERFACE
  //    TypeIdentifier TypeParameters? ExtendsInterfaces? InterfaceBody
  //    ;
  //=====================================================================
  boolean NormalInterfaceDeclaration()
    {
      if (saved("NormalInterfaceDeclaration",NormalInterfaceDeclaration)) return reuse();
      while (InterfaceModifier());
      if (!INTERFACE() || !TypeIdentifier()) return reject();
      TypeParameters();
      ExtendsInterfaces();
      if (!InterfaceBody()) return reject();
      return accept();
    }

  Cache NormalInterfaceDeclaration = new Cache();

  //=====================================================================
  //  InterfaceModifier = Annotation / PUBLIC / PROTECTED / PRIVATE /
  //    ABSTRACT / STATIC / STRICTFP ;
  //=====================================================================
  boolean InterfaceModifier()
    {
      if (saved("InterfaceModifier",InterfaceModifier)) return reuse();
      if (Annotation() || PUBLIC() || PROTECTED() || PRIVATE()) return accept();
      if (ABSTRACT()) return accept();
      if (STATIC()) return accept();
      if (STRICTFP()) return accept();
      return reject();
    }

  Cache InterfaceModifier = new Cache();

  //=====================================================================
  //  ExtendsInterfaces = EXTENDS InterfaceTypeList ;
  //=====================================================================
  boolean ExtendsInterfaces()
    {
      if (saved("ExtendsInterfaces",ExtendsInterfaces)) return reuse();
      if (!EXTENDS() || !InterfaceTypeList()) return reject();
      return accept();
    }

  Cache ExtendsInterfaces = new Cache();

  //=====================================================================
  //  InterfaceBody = LWING InterfaceMemberDeclaration* RWING ;
  //=====================================================================
  boolean InterfaceBody()
    {
      if (saved("InterfaceBody",InterfaceBody)) return reuse();
      if (!LWING()) return reject();
      while (InterfaceMemberDeclaration());
      if (!RWING()) return reject();
      return accept();
    }

  Cache InterfaceBody = new Cache();

  //=====================================================================
  //  InterfaceMemberDeclaration = ConstantDeclaration /
  //    InterfaceMethodDeclaration / ClassDeclaration /
  //    InterfaceDeclaration / SEMI ;
  //=====================================================================
  boolean InterfaceMemberDeclaration()
    {
      if (saved("InterfaceMemberDeclaration",InterfaceMemberDeclaration)) return reuse();
      if (ConstantDeclaration() || InterfaceMethodDeclaration() || ClassDeclaration() || InterfaceDeclaration()) return accept();
      if (SEMI()) return accept();
      return reject();
    }

  Cache InterfaceMemberDeclaration = new Cache();

  //=====================================================================
  //  ConstantDeclaration = ConstantModifier* UnannType
  //    VariableDeclaratorList SEMI ;
  //=====================================================================
  boolean ConstantDeclaration()
    {
      if (saved("ConstantDeclaration",ConstantDeclaration)) return reuse();
      while (ConstantModifier());
      if (!UnannType() || !VariableDeclaratorList() || !SEMI()) return reject();
      return accept();
    }

  Cache ConstantDeclaration = new Cache();

  //=====================================================================
  //  ConstantModifier = Annotation / PUBLIC / STATIC / FINAL ;
  //=====================================================================
  boolean ConstantModifier()
    {
      if (saved("ConstantModifier",ConstantModifier)) return reuse();
      if (Annotation() || PUBLIC() || STATIC() || FINAL()) return accept();
      return reject();
    }

  Cache ConstantModifier = new Cache();

  //=====================================================================
  //  InterfaceMethodDeclaration = InterfaceMethodModifier* MethodHeader
  //    MethodBody ;
  //=====================================================================
  boolean InterfaceMethodDeclaration()
    {
      if (saved("InterfaceMethodDeclaration",InterfaceMethodDeclaration)) return reuse();
      while (InterfaceMethodModifier());
      if (!MethodHeader() || !MethodBody()) return reject();
      return accept();
    }

  Cache InterfaceMethodDeclaration = new Cache();

  //=====================================================================
  //  InterfaceMethodModifier = Annotation / PUBLIC / PRIVATE / ABSTRACT
  //    / DEFAULT / STATIC / STRICTFP ;
  //=====================================================================
  boolean InterfaceMethodModifier()
    {
      if (saved("InterfaceMethodModifier",InterfaceMethodModifier)) return reuse();
      if (Annotation() || PUBLIC() || PRIVATE() || ABSTRACT()) return accept();
      if (DEFAULT()) return accept();
      if (STATIC()) return accept();
      if (STRICTFP()) return accept();
      return reject();
    }

  Cache InterfaceMethodModifier = new Cache();

  //=====================================================================
  //  AnnotationTypeDeclaration = InterfaceModifier* AT INTERFACE
  //    TypeIdentifier AnnotationTypeBody ;
  //=====================================================================
  boolean AnnotationTypeDeclaration()
    {
      if (saved("AnnotationTypeDeclaration",AnnotationTypeDeclaration)) return reuse();
      while (InterfaceModifier());
      if (!AT() || !INTERFACE() || !TypeIdentifier() || !AnnotationTypeBody()) return reject();
      return accept();
    }

  Cache AnnotationTypeDeclaration = new Cache();

  //=====================================================================
  //  AnnotationTypeBody = LWING AnnotationTypeMemberDeclaration* RWING
  //    ;
  //=====================================================================
  boolean AnnotationTypeBody()
    {
      if (saved("AnnotationTypeBody",AnnotationTypeBody)) return reuse();
      if (!LWING()) return reject();
      while (AnnotationTypeMemberDeclaration());
      if (!RWING()) return reject();
      return accept();
    }

  Cache AnnotationTypeBody = new Cache();

  //=====================================================================
  //  AnnotationTypeMemberDeclaration = AnnotationTypeElementDeclaration
  //    / ConstantDeclaration / ClassDeclaration / InterfaceDeclaration /
  //    SEMI ;
  //=====================================================================
  boolean AnnotationTypeMemberDeclaration()
    {
      if (saved("AnnotationTypeMemberDeclaration",AnnotationTypeMemberDeclaration)) return reuse();
      if (AnnotationTypeElementDeclaration() || ConstantDeclaration() || ClassDeclaration() || InterfaceDeclaration()) return accept();
      if (SEMI()) return accept();
      return reject();
    }

  Cache AnnotationTypeMemberDeclaration = new Cache();

  //=====================================================================
  //  AnnotationTypeElementDeclaration = AnnotationTypeElementModifier*
  //    UnannType Identifier LPAR RPAR Dims* DefaultValue? SEMI ;
  //=====================================================================
  boolean AnnotationTypeElementDeclaration()
    {
      if (saved("AnnotationTypeElementDeclaration",AnnotationTypeElementDeclaration)) return reuse();
      while (AnnotationTypeElementModifier());
      if (!UnannType() || !Identifier() || !LPAR() || !RPAR()) return reject();
      while (Dims());
      DefaultValue();
      if (!SEMI()) return reject();
      return accept();
    }

  Cache AnnotationTypeElementDeclaration = new Cache();

  //=====================================================================
  //  AnnotationTypeElementModifier = Annotation / PUBLIC / ABSTRACT ;
  //=====================================================================
  boolean AnnotationTypeElementModifier()
    {
      if (saved("AnnotationTypeElementModifier",AnnotationTypeElementModifier)) return reuse();
      if (Annotation() || PUBLIC() || ABSTRACT()) return accept();
      return reject();
    }

  Cache AnnotationTypeElementModifier = new Cache();

  //=====================================================================
  //  DefaultValue = DEFAULT ElementValue ;
  //=====================================================================
  boolean DefaultValue()
    {
      if (saved("DefaultValue",DefaultValue)) return reuse();
      if (!DEFAULT() || !ElementValue()) return reject();
      return accept();
    }

  Cache DefaultValue = new Cache();

  //=====================================================================
  //  Annotation = NormalAnnotation / SingleElementAnnotation /
  //    MarkerAnnotation ;
  //=====================================================================
  boolean Annotation()
    {
      if (saved("Annotation",Annotation)) return reuse();
      if (NormalAnnotation() || SingleElementAnnotation() || MarkerAnnotation()) return accept();
      return reject();
    }

  Cache Annotation = new Cache();

  //=====================================================================
  //  NormalAnnotation = AT TypeName LPAR ElementValuePairList? RPAR ;
  //=====================================================================
  boolean NormalAnnotation()
    {
      if (saved("NormalAnnotation",NormalAnnotation)) return reuse();
      if (!AT() || !TypeName() || !LPAR()) return reject();
      ElementValuePairList();
      if (!RPAR()) return reject();
      return accept();
    }

  Cache NormalAnnotation = new Cache();

  //=====================================================================
  //  ElementValuePairList = ElementValuePair (COMMA ElementValuePair)*
  //    ;
  //=====================================================================
  boolean ElementValuePairList()
    {
      if (saved("ElementValuePairList",ElementValuePairList)) return reuse();
      if (!ElementValuePair()) return reject();
      while (ElementValuePairList_2());
      return accept();
    }

  Cache ElementValuePairList = new Cache();

  //-------------------------------------------------------------------
  //  ElementValuePairList_2 = COMMA ElementValuePair
  //-------------------------------------------------------------------
  boolean ElementValuePairList_2()
    {
      if (saved("ElementValuePairList_2",ElementValuePairList_2)) return reuseInner();
      if (!COMMA() || !ElementValuePair()) return rejectInner();
      return acceptInner();
    }

  Cache ElementValuePairList_2 = new Cache();

  //=====================================================================
  //  ElementValuePair = Identifier EQU ElementValue ;
  //=====================================================================
  boolean ElementValuePair()
    {
      if (saved("ElementValuePair",ElementValuePair)) return reuse();
      if (!Identifier() || !EQU() || !ElementValue()) return reject();
      return accept();
    }

  Cache ElementValuePair = new Cache();

  //=====================================================================
  //  ElementValue = ConditionalExpression / ElementValueArrayInitializer
  //    / Annotation ;
  //=====================================================================
  boolean ElementValue()
    {
      if (saved("ElementValue",ElementValue)) return reuse();
      if (ConditionalExpression() || ElementValueArrayInitializer() || Annotation()) return accept();
      return reject();
    }

  Cache ElementValue = new Cache();

  //=====================================================================
  //  ElementValueArrayInitializer = LWING ElementValueList? COMMA? RWING
  //    ;
  //=====================================================================
  boolean ElementValueArrayInitializer()
    {
      if (saved("ElementValueArrayInitializer",ElementValueArrayInitializer)) return reuse();
      if (!LWING()) return reject();
      ElementValueList();
      COMMA();
      if (!RWING()) return reject();
      return accept();
    }

  Cache ElementValueArrayInitializer = new Cache();

  //=====================================================================
  //  ElementValueList = ElementValue (COMMA ElementValue)* ;
  //=====================================================================
  boolean ElementValueList()
    {
      if (saved("ElementValueList",ElementValueList)) return reuse();
      if (!ElementValue()) return reject();
      while (ElementValueList_2());
      return accept();
    }

  Cache ElementValueList = new Cache();

  //-------------------------------------------------------------------
  //  ElementValueList_2 = COMMA ElementValue
  //-------------------------------------------------------------------
  boolean ElementValueList_2()
    {
      if (saved("ElementValueList_2",ElementValueList_2)) return reuseInner();
      if (!COMMA() || !ElementValue()) return rejectInner();
      return acceptInner();
    }

  Cache ElementValueList_2 = new Cache();

  //=====================================================================
  //  MarkerAnnotation = AT TypeName ;
  //=====================================================================
  boolean MarkerAnnotation()
    {
      if (saved("MarkerAnnotation",MarkerAnnotation)) return reuse();
      if (!AT() || !TypeName()) return reject();
      return accept();
    }

  Cache MarkerAnnotation = new Cache();

  //=====================================================================
  //  SingleElementAnnotation = AT TypeName LPAR ElementValue RPAR ;
  //=====================================================================
  boolean SingleElementAnnotation()
    {
      if (saved("SingleElementAnnotation",SingleElementAnnotation)) return reuse();
      if (!AT() || !TypeName() || !LPAR() || !ElementValue()) return reject();
      if (!RPAR()) return reject();
      return accept();
    }

  Cache SingleElementAnnotation = new Cache();

  //=====================================================================
  //  ArrayInitializer = LWING VariableInitializerList? COMMA? RWING ;
  //=====================================================================
  boolean ArrayInitializer()
    {
      if (saved("ArrayInitializer",ArrayInitializer)) return reuse();
      if (!LWING()) return reject();
      VariableInitializerList();
      COMMA();
      if (!RWING()) return reject();
      return accept();
    }

  Cache ArrayInitializer = new Cache();

  //=====================================================================
  //  VariableInitializerList = VariableInitializer (COMMA
  //    VariableInitializer)* ;
  //=====================================================================
  boolean VariableInitializerList()
    {
      if (saved("VariableInitializerList",VariableInitializerList)) return reuse();
      if (!VariableInitializer()) return reject();
      while (VariableInitializerList_2());
      return accept();
    }

  Cache VariableInitializerList = new Cache();

  //-------------------------------------------------------------------
  //  VariableInitializerList_2 = COMMA VariableInitializer
  //-------------------------------------------------------------------
  boolean VariableInitializerList_2()
    {
      if (saved("VariableInitializerList_2",VariableInitializerList_2)) return reuseInner();
      if (!COMMA() || !VariableInitializer()) return rejectInner();
      return acceptInner();
    }

  Cache VariableInitializerList_2 = new Cache();

  //=====================================================================
  //  Block = LWING BlockStatements? RWING ;
  //=====================================================================
  boolean Block()
    {
      if (saved("Block",Block)) return reuse();
      if (!LWING()) return reject();
      BlockStatements();
      if (!RWING()) return reject();
      return accept();
    }

  Cache Block = new Cache();

  //=====================================================================
  //  BlockStatements = BlockStatement BlockStatement* ;
  //=====================================================================
  boolean BlockStatements()
    {
      if (saved("BlockStatements",BlockStatements)) return reuse();
      if (!BlockStatement()) return reject();
      while (BlockStatement());
      return accept();
    }

  Cache BlockStatements = new Cache();

  //=====================================================================
  //  BlockStatement = LocalVariableDeclarationStatement /
  //    ClassDeclaration / Statement ;
  //=====================================================================
  boolean BlockStatement()
    {
      if (saved("BlockStatement",BlockStatement)) return reuse();
      if (LocalVariableDeclarationStatement() || ClassDeclaration() || Statement()) return accept();
      return reject();
    }

  Cache BlockStatement = new Cache();

  //=====================================================================
  //  LocalVariableDeclarationStatement = LocalVariableDeclaration SEMI
  //    ;
  //=====================================================================
  boolean LocalVariableDeclarationStatement()
    {
      if (saved("LocalVariableDeclarationStatement",LocalVariableDeclarationStatement)) return reuse();
      if (!LocalVariableDeclaration() || !SEMI()) return reject();
      return accept();
    }

  Cache LocalVariableDeclarationStatement = new Cache();

  //=====================================================================
  //  LocalVariableDeclaration = VariableModifier* LocalVariableType
  //    VariableDeclaratorList ;
  //=====================================================================
  boolean LocalVariableDeclaration()
    {
      if (saved("LocalVariableDeclaration",LocalVariableDeclaration)) return reuse();
      while (VariableModifier());
      if (!LocalVariableType() || !VariableDeclaratorList()) return reject();
      return accept();
    }

  Cache LocalVariableDeclaration = new Cache();

  //=====================================================================
  //  LocalVariableType = UnannType / VAR ;
  //=====================================================================
  boolean LocalVariableType()
    {
      if (saved("LocalVariableType",LocalVariableType)) return reuse();
      if (UnannType() || VAR()) return accept();
      return reject();
    }

  Cache LocalVariableType = new Cache();

  //=====================================================================
  //  Statement = Block / EmptyStatement / ExpressionStatement /
  //    AssertStatement / SwitchStatement / LabeledStatement /
  //    IfThenElseStatement / IfThenStatement / WhileStatement /
  //    ForStatement / DoStatement / BreakStatement / ContinueStatement /
  //    ReturnStatement / SynchronizedStatement / ThrowStatement /
  //    TryStatement / YieldStatement ;
  //=====================================================================
  boolean Statement()
    {
      if (saved("Statement",Statement)) return reuse();
      if (Block() || EmptyStatement() || ExpressionStatement() || AssertStatement()) return accept();
      if (SwitchStatement()) return accept();
      if (LabeledStatement()) return accept();
      if (IfThenElseStatement()) return accept();
      if (IfThenStatement()) return accept();
      if (WhileStatement()) return accept();
      if (ForStatement()) return accept();
      if (DoStatement()) return accept();
      if (BreakStatement()) return accept();
      if (ContinueStatement()) return accept();
      if (ReturnStatement()) return accept();
      if (SynchronizedStatement()) return accept();
      if (ThrowStatement()) return accept();
      if (TryStatement()) return accept();
      if (YieldStatement()) return accept();
      return reject();
    }

  Cache Statement = new Cache();

  //=====================================================================
  //  EmptyStatement = SEMI ;
  //=====================================================================
  boolean EmptyStatement()
    {
      if (saved("EmptyStatement",EmptyStatement)) return reuse();
      if (!SEMI()) return reject();
      return accept();
    }

  Cache EmptyStatement = new Cache();

  //=====================================================================
  //  LabeledStatement = Identifier COLON Statement ;
  //=====================================================================
  boolean LabeledStatement()
    {
      if (saved("LabeledStatement",LabeledStatement)) return reuse();
      if (!Identifier() || !COLON() || !Statement()) return reject();
      return accept();
    }

  Cache LabeledStatement = new Cache();

  //=====================================================================
  //  ExpressionStatement = StatementExpression SEMI ;
  //=====================================================================
  boolean ExpressionStatement()
    {
      if (saved("ExpressionStatement",ExpressionStatement)) return reuse();
      if (!StatementExpression() || !SEMI()) return reject();
      return accept();
    }

  Cache ExpressionStatement = new Cache();

  //=====================================================================
  //  StatementExpression = Assignment / PreIncrementExpression /
  //    PreDecrementExpression / PostfixExpression / MethodInvocation /
  //    ClassInstanceCreationExpression ;
  //=====================================================================
  boolean StatementExpression()
    {
      if (saved("StatementExpression",StatementExpression)) return reuse();
      if (Assignment() || PreIncrementExpression() || PreDecrementExpression() || PostfixExpression()) return accept();
      if (MethodInvocation()) return accept();
      if (ClassInstanceCreationExpression()) return accept();
      return reject();
    }

  Cache StatementExpression = new Cache();

  //=====================================================================
  //  IfThenStatement = IF LPAR Expression RPAR Statement ;
  //=====================================================================
  boolean IfThenStatement()
    {
      if (saved("IfThenStatement",IfThenStatement)) return reuse();
      if (!IF() || !LPAR() || !Expression() || !RPAR()) return reject();
      if (!Statement()) return reject();
      return accept();
    }

  Cache IfThenStatement = new Cache();

  //=====================================================================
  //  IfThenElseStatement = IF LPAR Expression RPAR Statement ELSE
  //    Statement ;
  //=====================================================================
  boolean IfThenElseStatement()
    {
      if (saved("IfThenElseStatement",IfThenElseStatement)) return reuse();
      if (!IF() || !LPAR() || !Expression() || !RPAR()) return reject();
      if (!Statement()) return reject();
      if (!ELSE()) return reject();
      if (!Statement()) return reject();
      return accept();
    }

  Cache IfThenElseStatement = new Cache();

  //=====================================================================
  //  AssertStatement = ASSERT Expression SEMI / ASSERT Expression COLON
  //    Expression SEMI ;
  //=====================================================================
  boolean AssertStatement()
    {
      if (saved("AssertStatement",AssertStatement)) return reuse();
      if (AssertStatement_0() || AssertStatement_1()) return accept();
      return reject();
    }

  Cache AssertStatement = new Cache();

  //-------------------------------------------------------------------
  //  AssertStatement_0 = ASSERT Expression SEMI
  //-------------------------------------------------------------------
  boolean AssertStatement_0()
    {
      if (saved("AssertStatement_0",AssertStatement_0)) return reuseInner();
      if (!ASSERT() || !Expression() || !SEMI()) return rejectInner();
      return acceptInner();
    }

  Cache AssertStatement_0 = new Cache();

  //-------------------------------------------------------------------
  //  AssertStatement_1 = ASSERT Expression COLON Expression SEMI
  //-------------------------------------------------------------------
  boolean AssertStatement_1()
    {
      if (saved("AssertStatement_1",AssertStatement_1)) return reuseInner();
      if (!ASSERT() || !Expression() || !COLON() || !Expression()) return rejectInner();
      if (!SEMI()) return rejectInner();
      return acceptInner();
    }

  Cache AssertStatement_1 = new Cache();

  //=====================================================================
  //  SwitchStatement = SWITCH LPAR Expression RPAR SwitchBlock ;
  //=====================================================================
  boolean SwitchStatement()
    {
      if (saved("SwitchStatement",SwitchStatement)) return reuse();
      if (!SWITCH() || !LPAR() || !Expression() || !RPAR()) return reject();
      if (!SwitchBlock()) return reject();
      return accept();
    }

  Cache SwitchStatement = new Cache();

  //=====================================================================
  //  SwitchBlock = LWING SwitchRule+ RWING / LWING
  //    SwitchBlockStatementGroup* RWING ;
  //=====================================================================
  boolean SwitchBlock()
    {
      if (saved("SwitchBlock",SwitchBlock)) return reuse();
      if (SwitchBlock_0() || SwitchBlock_2()) return accept();
      return reject();
    }

  Cache SwitchBlock = new Cache();

  //-------------------------------------------------------------------
  //  SwitchBlock_0 = LWING SwitchRule+ RWING
  //-------------------------------------------------------------------
  boolean SwitchBlock_0()
    {
      if (saved("SwitchBlock_0",SwitchBlock_0)) return reuseInner();
      if (!LWING() || !SwitchRule()) return rejectInner();
      while (SwitchRule());
      if (!RWING()) return rejectInner();
      return acceptInner();
    }

  Cache SwitchBlock_0 = new Cache();

  //-------------------------------------------------------------------
  //  SwitchBlock_2 = LWING SwitchBlockStatementGroup* RWING
  //-------------------------------------------------------------------
  boolean SwitchBlock_2()
    {
      if (saved("SwitchBlock_2",SwitchBlock_2)) return reuseInner();
      if (!LWING()) return rejectInner();
      while (SwitchBlockStatementGroup());
      if (!RWING()) return rejectInner();
      return acceptInner();
    }

  Cache SwitchBlock_2 = new Cache();

  //=====================================================================
  //  SwitchRule = SwitchLabel ARROW Expression SEMI / SwitchLabel ARROW
  //    Block / SwitchLabel ARROW ThrowStatement ;
  //=====================================================================
  boolean SwitchRule()
    {
      if (saved("SwitchRule",SwitchRule)) return reuse();
      if (SwitchRule_0() || SwitchRule_1() || SwitchRule_2()) return accept();
      return reject();
    }

  Cache SwitchRule = new Cache();

  //-------------------------------------------------------------------
  //  SwitchRule_0 = SwitchLabel ARROW Expression SEMI
  //-------------------------------------------------------------------
  boolean SwitchRule_0()
    {
      if (saved("SwitchRule_0",SwitchRule_0)) return reuseInner();
      if (!SwitchLabel() || !ARROW() || !Expression() || !SEMI()) return rejectInner();
      return acceptInner();
    }

  Cache SwitchRule_0 = new Cache();

  //-------------------------------------------------------------------
  //  SwitchRule_1 = SwitchLabel ARROW Block
  //-------------------------------------------------------------------
  boolean SwitchRule_1()
    {
      if (saved("SwitchRule_1",SwitchRule_1)) return reuseInner();
      if (!SwitchLabel() || !ARROW() || !Block()) return rejectInner();
      return acceptInner();
    }

  Cache SwitchRule_1 = new Cache();

  //-------------------------------------------------------------------
  //  SwitchRule_2 = SwitchLabel ARROW ThrowStatement
  //-------------------------------------------------------------------
  boolean SwitchRule_2()
    {
      if (saved("SwitchRule_2",SwitchRule_2)) return reuseInner();
      if (!SwitchLabel() || !ARROW() || !ThrowStatement()) return rejectInner();
      return acceptInner();
    }

  Cache SwitchRule_2 = new Cache();

  //=====================================================================
  //  SwitchBlockStatementGroup = (SwitchLabel COLON)+ BlockStatements?
  //    ;
  //=====================================================================
  boolean SwitchBlockStatementGroup()
    {
      if (saved("SwitchBlockStatementGroup",SwitchBlockStatementGroup)) return reuse();
      if (!SwitchBlockStatementGroup_2()) return reject();
      while (SwitchBlockStatementGroup_2());
      BlockStatements();
      return accept();
    }

  Cache SwitchBlockStatementGroup = new Cache();

  //-------------------------------------------------------------------
  //  SwitchBlockStatementGroup_2 = SwitchLabel COLON
  //-------------------------------------------------------------------
  boolean SwitchBlockStatementGroup_2()
    {
      if (saved("SwitchBlockStatementGroup_2",SwitchBlockStatementGroup_2)) return reuseInner();
      if (!SwitchLabel() || !COLON()) return rejectInner();
      return acceptInner();
    }

  Cache SwitchBlockStatementGroup_2 = new Cache();

  //=====================================================================
  //  SwitchLabel = CASE CaseConstant (COMMA CaseConstant)* / DEFAULT ;
  //=====================================================================
  boolean SwitchLabel()
    {
      if (saved("SwitchLabel",SwitchLabel)) return reuse();
      if (SwitchLabel_0() || DEFAULT()) return accept();
      return reject();
    }

  Cache SwitchLabel = new Cache();

  //-------------------------------------------------------------------
  //  SwitchLabel_0 = CASE CaseConstant (COMMA CaseConstant)*
  //-------------------------------------------------------------------
  boolean SwitchLabel_0()
    {
      if (saved("SwitchLabel_0",SwitchLabel_0)) return reuseInner();
      if (!CASE() || !CaseConstant()) return rejectInner();
      while (SwitchLabel_2());
      return acceptInner();
    }

  Cache SwitchLabel_0 = new Cache();

  //-------------------------------------------------------------------
  //  SwitchLabel_2 = COMMA CaseConstant
  //-------------------------------------------------------------------
  boolean SwitchLabel_2()
    {
      if (saved("SwitchLabel_2",SwitchLabel_2)) return reuseInner();
      if (!COMMA() || !CaseConstant()) return rejectInner();
      return acceptInner();
    }

  Cache SwitchLabel_2 = new Cache();

  //=====================================================================
  //  CaseConstant = ConditionalExpression ;
  //=====================================================================
  boolean CaseConstant()
    {
      if (saved("CaseConstant",CaseConstant)) return reuse();
      if (!ConditionalExpression()) return reject();
      return accept();
    }

  Cache CaseConstant = new Cache();

  //=====================================================================
  //  WhileStatement = WHILE LPAR Expression RPAR Statement ;
  //=====================================================================
  boolean WhileStatement()
    {
      if (saved("WhileStatement",WhileStatement)) return reuse();
      if (!WHILE() || !LPAR() || !Expression() || !RPAR()) return reject();
      if (!Statement()) return reject();
      return accept();
    }

  Cache WhileStatement = new Cache();

  //=====================================================================
  //  DoStatement = DO Statement WHILE LPAR Expression RPAR ;
  //=====================================================================
  boolean DoStatement()
    {
      if (saved("DoStatement",DoStatement)) return reuse();
      if (!DO() || !Statement() || !WHILE() || !LPAR()) return reject();
      if (!Expression()) return reject();
      if (!RPAR()) return reject();
      return accept();
    }

  Cache DoStatement = new Cache();

  //=====================================================================
  //  ForStatement = BasicForStatement / EnhancedForStatement ;
  //=====================================================================
  boolean ForStatement()
    {
      if (saved("ForStatement",ForStatement)) return reuse();
      if (BasicForStatement() || EnhancedForStatement()) return accept();
      return reject();
    }

  Cache ForStatement = new Cache();

  //=====================================================================
  //  BasicForStatement = FOR LPAR ForInit? SEMI Expression? SEMI
  //    ForUpdate? RPAR Statement ;
  //=====================================================================
  boolean BasicForStatement()
    {
      if (saved("BasicForStatement",BasicForStatement)) return reuse();
      if (!FOR() || !LPAR()) return reject();
      ForInit();
      if (!SEMI()) return reject();
      Expression();
      if (!SEMI()) return reject();
      ForUpdate();
      if (!RPAR()) return reject();
      if (!Statement()) return reject();
      return accept();
    }

  Cache BasicForStatement = new Cache();

  //=====================================================================
  //  ForInit = LocalVariableDeclaration / StatementExpressionList ;
  //=====================================================================
  boolean ForInit()
    {
      if (saved("ForInit",ForInit)) return reuse();
      if (LocalVariableDeclaration() || StatementExpressionList()) return accept();
      return reject();
    }

  Cache ForInit = new Cache();

  //=====================================================================
  //  ForUpdate = StatementExpressionList ;
  //=====================================================================
  boolean ForUpdate()
    {
      if (saved("ForUpdate",ForUpdate)) return reuse();
      if (!StatementExpressionList()) return reject();
      return accept();
    }

  Cache ForUpdate = new Cache();

  //=====================================================================
  //  StatementExpressionList = StatementExpression (COMMA
  //    StatementExpression)* ;
  //=====================================================================
  boolean StatementExpressionList()
    {
      if (saved("StatementExpressionList",StatementExpressionList)) return reuse();
      if (!StatementExpression()) return reject();
      while (StatementExpressionList_2());
      return accept();
    }

  Cache StatementExpressionList = new Cache();

  //-------------------------------------------------------------------
  //  StatementExpressionList_2 = COMMA StatementExpression
  //-------------------------------------------------------------------
  boolean StatementExpressionList_2()
    {
      if (saved("StatementExpressionList_2",StatementExpressionList_2)) return reuseInner();
      if (!COMMA() || !StatementExpression()) return rejectInner();
      return acceptInner();
    }

  Cache StatementExpressionList_2 = new Cache();

  //=====================================================================
  //  EnhancedForStatement = FOR LPAR VariableModifier* LocalVariableType
  //    VariableDeclaratorId COLON Expression RPAR Statement ;
  //=====================================================================
  boolean EnhancedForStatement()
    {
      if (saved("EnhancedForStatement",EnhancedForStatement)) return reuse();
      if (!FOR() || !LPAR()) return reject();
      while (VariableModifier());
      if (!LocalVariableType()) return reject();
      if (!VariableDeclaratorId()) return reject();
      if (!COLON()) return reject();
      if (!Expression()) return reject();
      if (!RPAR()) return reject();
      if (!Statement()) return reject();
      return accept();
    }

  Cache EnhancedForStatement = new Cache();

  //=====================================================================
  //  BreakStatement = BREAK Identifier? SEMI ;
  //=====================================================================
  boolean BreakStatement()
    {
      if (saved("BreakStatement",BreakStatement)) return reuse();
      if (!BREAK()) return reject();
      Identifier();
      if (!SEMI()) return reject();
      return accept();
    }

  Cache BreakStatement = new Cache();

  //=====================================================================
  //  ContinueStatement = CONTINUE Identifier? SEMI ;
  //=====================================================================
  boolean ContinueStatement()
    {
      if (saved("ContinueStatement",ContinueStatement)) return reuse();
      if (!CONTINUE()) return reject();
      Identifier();
      if (!SEMI()) return reject();
      return accept();
    }

  Cache ContinueStatement = new Cache();

  //=====================================================================
  //  ReturnStatement = RETURN Expression? SEMI ;
  //=====================================================================
  boolean ReturnStatement()
    {
      if (saved("ReturnStatement",ReturnStatement)) return reuse();
      if (!RETURN()) return reject();
      Expression();
      if (!SEMI()) return reject();
      return accept();
    }

  Cache ReturnStatement = new Cache();

  //=====================================================================
  //  ThrowStatement = THROW Expression SEMI ;
  //=====================================================================
  boolean ThrowStatement()
    {
      if (saved("ThrowStatement",ThrowStatement)) return reuse();
      if (!THROW() || !Expression() || !SEMI()) return reject();
      return accept();
    }

  Cache ThrowStatement = new Cache();

  //=====================================================================
  //  SynchronizedStatement = SYNCHRONIZED LPAR Expression RPAR Block ;
  //=====================================================================
  boolean SynchronizedStatement()
    {
      if (saved("SynchronizedStatement",SynchronizedStatement)) return reuse();
      if (!SYNCHRONIZED() || !LPAR() || !Expression() || !RPAR()) return reject();
      if (!Block()) return reject();
      return accept();
    }

  Cache SynchronizedStatement = new Cache();

  //=====================================================================
  //  TryStatement = TRY Block Catches? Finally / TRY Block Catches /
  //    TryWithResourcesStatement ;
  //=====================================================================
  boolean TryStatement()
    {
      if (saved("TryStatement",TryStatement)) return reuse();
      if (TryStatement_0() || TryStatement_2() || TryWithResourcesStatement()) return accept();
      return reject();
    }

  Cache TryStatement = new Cache();

  //-------------------------------------------------------------------
  //  TryStatement_0 = TRY Block Catches? Finally
  //-------------------------------------------------------------------
  boolean TryStatement_0()
    {
      if (saved("TryStatement_0",TryStatement_0)) return reuseInner();
      if (!TRY() || !Block()) return rejectInner();
      Catches();
      if (!Finally()) return rejectInner();
      return acceptInner();
    }

  Cache TryStatement_0 = new Cache();

  //-------------------------------------------------------------------
  //  TryStatement_2 = TRY Block Catches
  //-------------------------------------------------------------------
  boolean TryStatement_2()
    {
      if (saved("TryStatement_2",TryStatement_2)) return reuseInner();
      if (!TRY() || !Block() || !Catches()) return rejectInner();
      return acceptInner();
    }

  Cache TryStatement_2 = new Cache();

  //=====================================================================
  //  Catches = CatchClause CatchClause* ;
  //=====================================================================
  boolean Catches()
    {
      if (saved("Catches",Catches)) return reuse();
      if (!CatchClause()) return reject();
      while (CatchClause());
      return accept();
    }

  Cache Catches = new Cache();

  //=====================================================================
  //  CatchClause = CATCH LPAR CatchFormalParameter RPAR Block ;
  //=====================================================================
  boolean CatchClause()
    {
      if (saved("CatchClause",CatchClause)) return reuse();
      if (!CATCH() || !LPAR() || !CatchFormalParameter() || !RPAR()) return reject();
      if (!Block()) return reject();
      return accept();
    }

  Cache CatchClause = new Cache();

  //=====================================================================
  //  CatchFormalParameter = VariableModifier* CatchType
  //    VariableDeclaratorId ;
  //=====================================================================
  boolean CatchFormalParameter()
    {
      if (saved("CatchFormalParameter",CatchFormalParameter)) return reuse();
      while (VariableModifier());
      if (!CatchType() || !VariableDeclaratorId()) return reject();
      return accept();
    }

  Cache CatchFormalParameter = new Cache();

  //=====================================================================
  //  CatchType = UnannClassType (OR ClassType)* ;
  //=====================================================================
  boolean CatchType()
    {
      if (saved("CatchType",CatchType)) return reuse();
      if (!UnannClassType()) return reject();
      while (CatchType_2());
      return accept();
    }

  Cache CatchType = new Cache();

  //-------------------------------------------------------------------
  //  CatchType_2 = OR ClassType
  //-------------------------------------------------------------------
  boolean CatchType_2()
    {
      if (saved("CatchType_2",CatchType_2)) return reuseInner();
      if (!OR() || !ClassType()) return rejectInner();
      return acceptInner();
    }

  Cache CatchType_2 = new Cache();

  //=====================================================================
  //  Finally = FINALLY Block ;
  //=====================================================================
  boolean Finally()
    {
      if (saved("Finally",Finally)) return reuse();
      if (!FINALLY() || !Block()) return reject();
      return accept();
    }

  Cache Finally = new Cache();

  //=====================================================================
  //  TryWithResourcesStatement = TRY ResourceSpecification Block
  //    Catches? Finally? ;
  //=====================================================================
  boolean TryWithResourcesStatement()
    {
      if (saved("TryWithResourcesStatement",TryWithResourcesStatement)) return reuse();
      if (!TRY() || !ResourceSpecification() || !Block()) return reject();
      Catches();
      Finally();
      return accept();
    }

  Cache TryWithResourcesStatement = new Cache();

  //=====================================================================
  //  ResourceSpecification = LPAR ResourceList SEMI? RPAR ;
  //=====================================================================
  boolean ResourceSpecification()
    {
      if (saved("ResourceSpecification",ResourceSpecification)) return reuse();
      if (!LPAR() || !ResourceList()) return reject();
      SEMI();
      if (!RPAR()) return reject();
      return accept();
    }

  Cache ResourceSpecification = new Cache();

  //=====================================================================
  //  ResourceList = Resource (SEMI Resource)* ;
  //=====================================================================
  boolean ResourceList()
    {
      if (saved("ResourceList",ResourceList)) return reuse();
      if (!Resource()) return reject();
      while (ResourceList_2());
      return accept();
    }

  Cache ResourceList = new Cache();

  //-------------------------------------------------------------------
  //  ResourceList_2 = SEMI Resource
  //-------------------------------------------------------------------
  boolean ResourceList_2()
    {
      if (saved("ResourceList_2",ResourceList_2)) return reuseInner();
      if (!SEMI() || !Resource()) return rejectInner();
      return acceptInner();
    }

  Cache ResourceList_2 = new Cache();

  //=====================================================================
  //  Resource = VariableModifier* LocalVariableType Identifier EQU
  //    Expression / VariableAccess ;
  //=====================================================================
  boolean Resource()
    {
      if (saved("Resource",Resource)) return reuse();
      if (Resource_0() || VariableAccess()) return accept();
      return reject();
    }

  Cache Resource = new Cache();

  //-------------------------------------------------------------------
  //  Resource_0 = VariableModifier* LocalVariableType Identifier EQU
  //    Expression
  //-------------------------------------------------------------------
  boolean Resource_0()
    {
      if (saved("Resource_0",Resource_0)) return reuseInner();
      while (VariableModifier());
      if (!LocalVariableType() || !Identifier() || !EQU() || !Expression()) return rejectInner();
      return acceptInner();
    }

  Cache Resource_0 = new Cache();

  //=====================================================================
  //  VariableAccess = Name / FieldAccess ;
  //=====================================================================
  boolean VariableAccess()
    {
      if (saved("VariableAccess",VariableAccess)) return reuse();
      if (Name() || FieldAccess()) return accept();
      return reject();
    }

  Cache VariableAccess = new Cache();

  //=====================================================================
  //  YieldStatement = YIELD Expression SEMI ;
  //=====================================================================
  boolean YieldStatement()
    {
      if (saved("YieldStatement",YieldStatement)) return reuse();
      if (!YIELD() || !Expression() || !SEMI()) return reject();
      return accept();
    }

  Cache YieldStatement = new Cache();

  //=====================================================================
  //  Expression = LambdaExpression / Assignment / ConditionalExpression
  //    ;
  //=====================================================================
  boolean Expression()
    {
      if (saved("Expression",Expression)) return reuse();
      if (LambdaExpression() || Assignment() || ConditionalExpression()) return accept();
      return reject();
    }

  Cache Expression = new Cache();

  //=====================================================================
  //  ClassLiteral = TypeName (LBRK RBRK)* DOT CLASS / NumericType (LBRK
  //    RBRK)* DOT CLASS / BOOLEAN (LBRK RBRK)* DOT CLASS / VOID DOT
  //    CLASS ;
  //=====================================================================
  boolean ClassLiteral()
    {
      if (saved("ClassLiteral",ClassLiteral)) return reuse();
      if (ClassLiteral_0() || ClassLiteral_3() || ClassLiteral_6() || ClassLiteral_9()) return accept();
      return reject();
    }

  Cache ClassLiteral = new Cache();

  //-------------------------------------------------------------------
  //  ClassLiteral_0 = TypeName (LBRK RBRK)* DOT CLASS
  //-------------------------------------------------------------------
  boolean ClassLiteral_0()
    {
      if (saved("ClassLiteral_0",ClassLiteral_0)) return reuseInner();
      if (!TypeName()) return rejectInner();
      while (ClassLiteral_2());
      if (!DOT() || !CLASS()) return rejectInner();
      return acceptInner();
    }

  Cache ClassLiteral_0 = new Cache();

  //-------------------------------------------------------------------
  //  ClassLiteral_3 = NumericType (LBRK RBRK)* DOT CLASS
  //-------------------------------------------------------------------
  boolean ClassLiteral_3()
    {
      if (saved("ClassLiteral_3",ClassLiteral_3)) return reuseInner();
      if (!NumericType()) return rejectInner();
      while (ClassLiteral_2());
      if (!DOT() || !CLASS()) return rejectInner();
      return acceptInner();
    }

  Cache ClassLiteral_3 = new Cache();

  //-------------------------------------------------------------------
  //  ClassLiteral_6 = BOOLEAN (LBRK RBRK)* DOT CLASS
  //-------------------------------------------------------------------
  boolean ClassLiteral_6()
    {
      if (saved("ClassLiteral_6",ClassLiteral_6)) return reuseInner();
      if (!BOOLEAN()) return rejectInner();
      while (ClassLiteral_2());
      if (!DOT() || !CLASS()) return rejectInner();
      return acceptInner();
    }

  Cache ClassLiteral_6 = new Cache();

  //-------------------------------------------------------------------
  //  ClassLiteral_9 = VOID DOT CLASS
  //-------------------------------------------------------------------
  boolean ClassLiteral_9()
    {
      if (saved("ClassLiteral_9",ClassLiteral_9)) return reuseInner();
      if (!VOID() || !DOT() || !CLASS()) return rejectInner();
      return acceptInner();
    }

  Cache ClassLiteral_9 = new Cache();

  //-------------------------------------------------------------------
  //  ClassLiteral_2 = LBRK RBRK
  //-------------------------------------------------------------------
  boolean ClassLiteral_2()
    {
      if (saved("ClassLiteral_2",ClassLiteral_2)) return reuseInner();
      if (!LBRK() || !RBRK()) return rejectInner();
      return acceptInner();
    }

  Cache ClassLiteral_2 = new Cache();

  //=====================================================================
  //  UnqualifiedClassInstanceCreationExpression = NEW TypeArguments?
  //    ClassOrInterfaceTypeToInstantiate LPAR ArgumentList* RPAR
  //    ClassBody? ;
  //=====================================================================
  boolean UnqualifiedClassInstanceCreationExpression()
    {
      if (saved("UnqualifiedClassInstanceCreationExpression",UnqualifiedClassInstanceCreationExpression)) return reuse();
      if (!NEW()) return reject();
      TypeArguments();
      if (!ClassOrInterfaceTypeToInstantiate() || !LPAR()) return reject();
      while (ArgumentList());
      if (!RPAR()) return reject();
      ClassBody();
      return accept();
    }

  Cache UnqualifiedClassInstanceCreationExpression = new Cache();

  //=====================================================================
  //  ClassOrInterfaceTypeToInstantiate = Annotation* Identifier
  //    TypeArgumentsOrDiamond? (DOT Annotation* Identifier
  //    TypeArgumentsOrDiamond?)* ;
  //=====================================================================
  boolean ClassOrInterfaceTypeToInstantiate()
    {
      if (saved("ClassOrInterfaceTypeToInstantiate",ClassOrInterfaceTypeToInstantiate)) return reuse();
      while (Annotation());
      if (!Identifier()) return reject();
      TypeArgumentsOrDiamond();
      while (ClassOrInterfaceTypeToInstantiate_4());
      return accept();
    }

  Cache ClassOrInterfaceTypeToInstantiate = new Cache();

  //-------------------------------------------------------------------
  //  ClassOrInterfaceTypeToInstantiate_4 = DOT Annotation* Identifier
  //    TypeArgumentsOrDiamond?
  //-------------------------------------------------------------------
  boolean ClassOrInterfaceTypeToInstantiate_4()
    {
      if (saved("ClassOrInterfaceTypeToInstantiate_4",ClassOrInterfaceTypeToInstantiate_4)) return reuseInner();
      if (!DOT()) return rejectInner();
      while (Annotation());
      if (!Identifier()) return rejectInner();
      TypeArgumentsOrDiamond();
      return acceptInner();
    }

  Cache ClassOrInterfaceTypeToInstantiate_4 = new Cache();

  //=====================================================================
  //  TypeArgumentsOrDiamond = TypeArguments / LPOINT RPOINT &LPAR ;
  //=====================================================================
  boolean TypeArgumentsOrDiamond()
    {
      if (saved("TypeArgumentsOrDiamond",TypeArgumentsOrDiamond)) return reuse();
      if (TypeArguments() || TypeArgumentsOrDiamond_0()) return accept();
      return reject();
    }

  Cache TypeArgumentsOrDiamond = new Cache();

  //-------------------------------------------------------------------
  //  TypeArgumentsOrDiamond_0 = LPOINT RPOINT &LPAR
  //-------------------------------------------------------------------
  boolean TypeArgumentsOrDiamond_0()
    {
      if (saved("TypeArgumentsOrDiamond_0",TypeArgumentsOrDiamond_0)) return reuseInner();
      if (!LPOINT() || !RPOINT() || !TypeArgumentsOrDiamond_1()) return rejectInner();
      return acceptInner();
    }

  Cache TypeArgumentsOrDiamond_0 = new Cache();

  //-------------------------------------------------------------------
  //  TypeArgumentsOrDiamond_1 = &LPAR
  //-------------------------------------------------------------------
  boolean TypeArgumentsOrDiamond_1()
    {
      if (saved("TypeArgumentsOrDiamond_1","LPAR",TypeArgumentsOrDiamond_1)) return reusePred();
      if (!LPAR()) return rejectPred();
      return acceptPred();
    }

  Cache TypeArgumentsOrDiamond_1 = new Cache();

  //=====================================================================
  //  ArrayCreationExpression = NEW PrimitiveType DimExprs Dims? / NEW
  //    ClassType DimExprs Dims? / NEW PrimitiveType Dims
  //    ArrayInitializer / NEW ClassType Dims ArrayInitializer ;
  //=====================================================================
  boolean ArrayCreationExpression()
    {
      if (saved("ArrayCreationExpression",ArrayCreationExpression)) return reuse();
      if (ArrayCreationExpression_0() || ArrayCreationExpression_2() || ArrayCreationExpression_4() || ArrayCreationExpression_5()) return accept();
      return reject();
    }

  Cache ArrayCreationExpression = new Cache();

  //-------------------------------------------------------------------
  //  ArrayCreationExpression_0 = NEW PrimitiveType DimExprs Dims?
  //-------------------------------------------------------------------
  boolean ArrayCreationExpression_0()
    {
      if (saved("ArrayCreationExpression_0",ArrayCreationExpression_0)) return reuseInner();
      if (!NEW() || !PrimitiveType() || !DimExprs()) return rejectInner();
      Dims();
      return acceptInner();
    }

  Cache ArrayCreationExpression_0 = new Cache();

  //-------------------------------------------------------------------
  //  ArrayCreationExpression_2 = NEW ClassType DimExprs Dims?
  //-------------------------------------------------------------------
  boolean ArrayCreationExpression_2()
    {
      if (saved("ArrayCreationExpression_2",ArrayCreationExpression_2)) return reuseInner();
      if (!NEW() || !ClassType() || !DimExprs()) return rejectInner();
      Dims();
      return acceptInner();
    }

  Cache ArrayCreationExpression_2 = new Cache();

  //-------------------------------------------------------------------
  //  ArrayCreationExpression_4 = NEW PrimitiveType Dims
  //    ArrayInitializer
  //-------------------------------------------------------------------
  boolean ArrayCreationExpression_4()
    {
      if (saved("ArrayCreationExpression_4",ArrayCreationExpression_4)) return reuseInner();
      if (!NEW() || !PrimitiveType() || !Dims() || !ArrayInitializer()) return rejectInner();
      return acceptInner();
    }

  Cache ArrayCreationExpression_4 = new Cache();

  //-------------------------------------------------------------------
  //  ArrayCreationExpression_5 = NEW ClassType Dims ArrayInitializer
  //-------------------------------------------------------------------
  boolean ArrayCreationExpression_5()
    {
      if (saved("ArrayCreationExpression_5",ArrayCreationExpression_5)) return reuseInner();
      if (!NEW() || !ClassType() || !Dims() || !ArrayInitializer()) return rejectInner();
      return acceptInner();
    }

  Cache ArrayCreationExpression_5 = new Cache();

  //=====================================================================
  //  DimExprs = DimExpr DimExpr* ;
  //=====================================================================
  boolean DimExprs()
    {
      if (saved("DimExprs",DimExprs)) return reuse();
      if (!DimExpr()) return reject();
      while (DimExpr());
      return accept();
    }

  Cache DimExprs = new Cache();

  //=====================================================================
  //  DimExpr = Annotation* LBRK Expression RBRK ;
  //=====================================================================
  boolean DimExpr()
    {
      if (saved("DimExpr",DimExpr)) return reuse();
      while (Annotation());
      if (!LBRK() || !Expression() || !RBRK()) return reject();
      return accept();
    }

  Cache DimExpr = new Cache();

  //=====================================================================
  //  ArgumentList = Expression (COMMA Expression)* ;
  //=====================================================================
  boolean ArgumentList()
    {
      if (saved("ArgumentList",ArgumentList)) return reuse();
      if (!Expression()) return reject();
      while (ArgumentList_2());
      return accept();
    }

  Cache ArgumentList = new Cache();

  //-------------------------------------------------------------------
  //  ArgumentList_2 = COMMA Expression
  //-------------------------------------------------------------------
  boolean ArgumentList_2()
    {
      if (saved("ArgumentList_2",ArgumentList_2)) return reuseInner();
      if (!COMMA() || !Expression()) return rejectInner();
      return acceptInner();
    }

  Cache ArgumentList_2 = new Cache();

  //=====================================================================
  //  FieldAccess = Primary DOT Identifier / SUPER DOT Identifier /
  //    TypeName DOT SUPER DOT Identifier ;
  //=====================================================================
  boolean FieldAccess()
    {
      if (saved("FieldAccess",FieldAccess)) return reuse();
      if (FieldAccess_0() || FieldAccess_1() || FieldAccess_2()) return accept();
      return reject();
    }

  Cache FieldAccess = new Cache();

  //-------------------------------------------------------------------
  //  FieldAccess_0 = Primary DOT Identifier
  //-------------------------------------------------------------------
  boolean FieldAccess_0()
    {
      if (saved("FieldAccess_0",FieldAccess_0)) return reuseInner();
      if (!Primary() || !DOT() || !Identifier()) return rejectInner();
      return acceptInner();
    }

  Cache FieldAccess_0 = new Cache();

  //-------------------------------------------------------------------
  //  FieldAccess_1 = SUPER DOT Identifier
  //-------------------------------------------------------------------
  boolean FieldAccess_1()
    {
      if (saved("FieldAccess_1",FieldAccess_1)) return reuseInner();
      if (!SUPER() || !DOT() || !Identifier()) return rejectInner();
      return acceptInner();
    }

  Cache FieldAccess_1 = new Cache();

  //-------------------------------------------------------------------
  //  FieldAccess_2 = TypeName DOT SUPER DOT Identifier
  //-------------------------------------------------------------------
  boolean FieldAccess_2()
    {
      if (saved("FieldAccess_2",FieldAccess_2)) return reuseInner();
      if (!TypeName() || !DOT() || !SUPER() || !DOT()) return rejectInner();
      if (!Identifier()) return rejectInner();
      return acceptInner();
    }

  Cache FieldAccess_2 = new Cache();

  //=====================================================================
  //  PostfixExpression = Primary (INC / DEC)? / Name (INC / DEC)? ;
  //=====================================================================
  boolean PostfixExpression()
    {
      if (saved("PostfixExpression",PostfixExpression)) return reuse();
      if (PostfixExpression_0() || PostfixExpression_3()) return accept();
      return reject();
    }

  Cache PostfixExpression = new Cache();

  //-------------------------------------------------------------------
  //  PostfixExpression_0 = Primary (INC / DEC)?
  //-------------------------------------------------------------------
  boolean PostfixExpression_0()
    {
      if (saved("PostfixExpression_0",PostfixExpression_0)) return reuseInner();
      if (!Primary()) return rejectInner();
      PostfixExpression_2();
      return acceptInner();
    }

  Cache PostfixExpression_0 = new Cache();

  //-------------------------------------------------------------------
  //  PostfixExpression_3 = Name (INC / DEC)?
  //-------------------------------------------------------------------
  boolean PostfixExpression_3()
    {
      if (saved("PostfixExpression_3",PostfixExpression_3)) return reuseInner();
      if (!Name()) return rejectInner();
      PostfixExpression_2();
      return acceptInner();
    }

  Cache PostfixExpression_3 = new Cache();

  //-------------------------------------------------------------------
  //  PostfixExpression_2 = INC / DEC
  //-------------------------------------------------------------------
  boolean PostfixExpression_2()
    {
      if (saved("PostfixExpression_2",PostfixExpression_2)) return reuseInner();
      if (INC() || DEC()) return acceptInner();
      return rejectInner();
    }

  Cache PostfixExpression_2 = new Cache();

  //=====================================================================
  //  UnaryExpression = PreIncrementExpression / PreDecrementExpression /
  //    PLUS UnaryExpression / MINUS UnaryExpression /
  //    UnaryExpressionNotPlusMinus ;
  //=====================================================================
  boolean UnaryExpression()
    {
      if (saved("UnaryExpression",UnaryExpression)) return reuse();
      if (PreIncrementExpression() || PreDecrementExpression() || UnaryExpression_0() || UnaryExpression_1()) return accept();
      if (UnaryExpressionNotPlusMinus()) return accept();
      return reject();
    }

  Cache UnaryExpression = new Cache();

  //-------------------------------------------------------------------
  //  UnaryExpression_0 = PLUS UnaryExpression
  //-------------------------------------------------------------------
  boolean UnaryExpression_0()
    {
      if (saved("UnaryExpression_0",UnaryExpression_0)) return reuseInner();
      if (!PLUS() || !UnaryExpression()) return rejectInner();
      return acceptInner();
    }

  Cache UnaryExpression_0 = new Cache();

  //-------------------------------------------------------------------
  //  UnaryExpression_1 = MINUS UnaryExpression
  //-------------------------------------------------------------------
  boolean UnaryExpression_1()
    {
      if (saved("UnaryExpression_1",UnaryExpression_1)) return reuseInner();
      if (!MINUS() || !UnaryExpression()) return rejectInner();
      return acceptInner();
    }

  Cache UnaryExpression_1 = new Cache();

  //=====================================================================
  //  PreIncrementExpression = INC UnaryExpression ;
  //=====================================================================
  boolean PreIncrementExpression()
    {
      if (saved("PreIncrementExpression",PreIncrementExpression)) return reuse();
      if (!INC() || !UnaryExpression()) return reject();
      return accept();
    }

  Cache PreIncrementExpression = new Cache();

  //=====================================================================
  //  PreDecrementExpression = DEC UnaryExpression ;
  //=====================================================================
  boolean PreDecrementExpression()
    {
      if (saved("PreDecrementExpression",PreDecrementExpression)) return reuse();
      if (!DEC() || !UnaryExpression()) return reject();
      return accept();
    }

  Cache PreDecrementExpression = new Cache();

  //=====================================================================
  //  UnaryExpressionNotPlusMinus = CastExpression / PostfixExpression /
  //    TILDE UnaryExpression / BANG UnaryExpression / SwitchExpression
  //    ;
  //=====================================================================
  boolean UnaryExpressionNotPlusMinus()
    {
      if (saved("UnaryExpressionNotPlusMinus",UnaryExpressionNotPlusMinus)) return reuse();
      if (CastExpression() || PostfixExpression() || UnaryExpressionNotPlusMinus_0() || UnaryExpressionNotPlusMinus_1()) return accept();
      if (SwitchExpression()) return accept();
      return reject();
    }

  Cache UnaryExpressionNotPlusMinus = new Cache();

  //-------------------------------------------------------------------
  //  UnaryExpressionNotPlusMinus_0 = TILDE UnaryExpression
  //-------------------------------------------------------------------
  boolean UnaryExpressionNotPlusMinus_0()
    {
      if (saved("UnaryExpressionNotPlusMinus_0",UnaryExpressionNotPlusMinus_0)) return reuseInner();
      if (!TILDE() || !UnaryExpression()) return rejectInner();
      return acceptInner();
    }

  Cache UnaryExpressionNotPlusMinus_0 = new Cache();

  //-------------------------------------------------------------------
  //  UnaryExpressionNotPlusMinus_1 = BANG UnaryExpression
  //-------------------------------------------------------------------
  boolean UnaryExpressionNotPlusMinus_1()
    {
      if (saved("UnaryExpressionNotPlusMinus_1",UnaryExpressionNotPlusMinus_1)) return reuseInner();
      if (!BANG() || !UnaryExpression()) return rejectInner();
      return acceptInner();
    }

  Cache UnaryExpressionNotPlusMinus_1 = new Cache();

  //=====================================================================
  //  CastExpression = LPAR ReferenceType AdditionalBound* RPAR
  //    LambdaExpression / LPAR ReferenceType AdditionalBound* RPAR
  //    UnaryExpressionNotPlusMinus / LPAR PrimitiveType RPAR
  //    UnaryExpression ;
  //=====================================================================
  boolean CastExpression()
    {
      if (saved("CastExpression",CastExpression)) return reuse();
      if (CastExpression_0() || CastExpression_2() || CastExpression_4()) return accept();
      return reject();
    }

  Cache CastExpression = new Cache();

  //-------------------------------------------------------------------
  //  CastExpression_0 = LPAR ReferenceType AdditionalBound* RPAR
  //    LambdaExpression
  //-------------------------------------------------------------------
  boolean CastExpression_0()
    {
      if (saved("CastExpression_0",CastExpression_0)) return reuseInner();
      if (!LPAR() || !ReferenceType()) return rejectInner();
      while (AdditionalBound());
      if (!RPAR()) return rejectInner();
      if (!LambdaExpression()) return rejectInner();
      return acceptInner();
    }

  Cache CastExpression_0 = new Cache();

  //-------------------------------------------------------------------
  //  CastExpression_2 = LPAR ReferenceType AdditionalBound* RPAR
  //    UnaryExpressionNotPlusMinus
  //-------------------------------------------------------------------
  boolean CastExpression_2()
    {
      if (saved("CastExpression_2",CastExpression_2)) return reuseInner();
      if (!LPAR() || !ReferenceType()) return rejectInner();
      while (AdditionalBound());
      if (!RPAR()) return rejectInner();
      if (!UnaryExpressionNotPlusMinus()) return rejectInner();
      return acceptInner();
    }

  Cache CastExpression_2 = new Cache();

  //-------------------------------------------------------------------
  //  CastExpression_4 = LPAR PrimitiveType RPAR UnaryExpression
  //-------------------------------------------------------------------
  boolean CastExpression_4()
    {
      if (saved("CastExpression_4",CastExpression_4)) return reuseInner();
      if (!LPAR() || !PrimitiveType() || !RPAR() || !UnaryExpression()) return rejectInner();
      return acceptInner();
    }

  Cache CastExpression_4 = new Cache();

  //=====================================================================
  //  InfixExpression = UnaryExpression (InfixOperator UnaryExpression /
  //    INSTANCEOF ReferenceType)* ;
  //=====================================================================
  boolean InfixExpression()
    {
      if (saved("InfixExpression",InfixExpression)) return reuse();
      if (!UnaryExpression()) return reject();
      while (InfixExpression_2());
      return accept();
    }

  Cache InfixExpression = new Cache();

  //-------------------------------------------------------------------
  //  InfixExpression_2 = InfixOperator UnaryExpression / INSTANCEOF
  //    ReferenceType
  //-------------------------------------------------------------------
  boolean InfixExpression_2()
    {
      if (saved("InfixExpression_2",InfixExpression_2)) return reuseInner();
      if (InfixExpression_3() || InfixExpression_4()) return acceptInner();
      return rejectInner();
    }

  Cache InfixExpression_2 = new Cache();

  //-------------------------------------------------------------------
  //  InfixExpression_3 = InfixOperator UnaryExpression
  //-------------------------------------------------------------------
  boolean InfixExpression_3()
    {
      if (saved("InfixExpression_3",InfixExpression_3)) return reuseInner();
      if (!InfixOperator() || !UnaryExpression()) return rejectInner();
      return acceptInner();
    }

  Cache InfixExpression_3 = new Cache();

  //-------------------------------------------------------------------
  //  InfixExpression_4 = INSTANCEOF ReferenceType
  //-------------------------------------------------------------------
  boolean InfixExpression_4()
    {
      if (saved("InfixExpression_4",InfixExpression_4)) return reuseInner();
      if (!INSTANCEOF() || !ReferenceType()) return rejectInner();
      return acceptInner();
    }

  Cache InfixExpression_4 = new Cache();

  //=====================================================================
  //  InfixOperator = OROR / ANDAND / OR / HAT / AND / EQUAL / NOTEQUAL /
  //    LT / GT / LE / GE / SL / SR / BSR / PLUS / MINUS / STAR / DIV /
  //    MOD ;
  //=====================================================================
  boolean InfixOperator()
    {
      if (saved("InfixOperator",InfixOperator)) return reuse();
      if (OROR() || ANDAND() || OR() || HAT()) return accept();
      if (AND()) return accept();
      if (EQUAL()) return accept();
      if (NOTEQUAL()) return accept();
      if (LT()) return accept();
      if (GT()) return accept();
      if (LE()) return accept();
      if (GE()) return accept();
      if (SL()) return accept();
      if (SR()) return accept();
      if (BSR()) return accept();
      if (PLUS()) return accept();
      if (MINUS()) return accept();
      if (STAR()) return accept();
      if (DIV()) return accept();
      if (MOD()) return accept();
      return reject();
    }

  Cache InfixOperator = new Cache();

  //=====================================================================
  //  ConditionalExpression = InfixExpression QUERY Expression COLON
  //    (LambdaExpression / ConditionalExpression) / InfixExpression ;
  //=====================================================================
  boolean ConditionalExpression()
    {
      if (saved("ConditionalExpression",ConditionalExpression)) return reuse();
      if (ConditionalExpression_0() || InfixExpression()) return accept();
      return reject();
    }

  Cache ConditionalExpression = new Cache();

  //-------------------------------------------------------------------
  //  ConditionalExpression_0 = InfixExpression QUERY Expression COLON
  //    (LambdaExpression / ConditionalExpression)
  //-------------------------------------------------------------------
  boolean ConditionalExpression_0()
    {
      if (saved("ConditionalExpression_0",ConditionalExpression_0)) return reuseInner();
      if (!InfixExpression() || !QUERY() || !Expression() || !COLON()) return rejectInner();
      if (!LambdaExpression()
       && !ConditionalExpression()
         ) return rejectInner();
      return acceptInner();
    }

  Cache ConditionalExpression_0 = new Cache();

  //=====================================================================
  //  Assignment = LeftHandSide AssignmentOperator Expression ;
  //=====================================================================
  boolean Assignment()
    {
      if (saved("Assignment",Assignment)) return reuse();
      if (!LeftHandSide() || !AssignmentOperator() || !Expression()) return reject();
      return accept();
    }

  Cache Assignment = new Cache();

  //=====================================================================
  //  LeftHandSide = ArrayOrFieldAccess / Name / LPAR LeftHandSide RPAR
  //    ;
  //=====================================================================
  boolean LeftHandSide()
    {
      if (saved("LeftHandSide",LeftHandSide)) return reuse();
      if (ArrayOrFieldAccess() || Name() || LeftHandSide_0()) return accept();
      return reject();
    }

  Cache LeftHandSide = new Cache();

  //-------------------------------------------------------------------
  //  LeftHandSide_0 = LPAR LeftHandSide RPAR
  //-------------------------------------------------------------------
  boolean LeftHandSide_0()
    {
      if (saved("LeftHandSide_0",LeftHandSide_0)) return reuseInner();
      if (!LPAR() || !LeftHandSide() || !RPAR()) return rejectInner();
      return acceptInner();
    }

  Cache LeftHandSide_0 = new Cache();

  //=====================================================================
  //  AssignmentOperator = EQU / STAREQU / DIVEQU / MODEQU / PLUSEQU /
  //    MINUSEQU / SLEQU / SREQU / BSREQU / ANDEQU / HATEQU / OREQU ;
  //=====================================================================
  boolean AssignmentOperator()
    {
      if (saved("AssignmentOperator",AssignmentOperator)) return reuse();
      if (EQU() || STAREQU() || DIVEQU() || MODEQU()) return accept();
      if (PLUSEQU()) return accept();
      if (MINUSEQU()) return accept();
      if (SLEQU()) return accept();
      if (SREQU()) return accept();
      if (BSREQU()) return accept();
      if (ANDEQU()) return accept();
      if (HATEQU()) return accept();
      if (OREQU()) return accept();
      return reject();
    }

  Cache AssignmentOperator = new Cache();

  //=====================================================================
  //  LambdaExpression = LambdaParameters ARROW LambdaBody ;
  //=====================================================================
  boolean LambdaExpression()
    {
      if (saved("LambdaExpression",LambdaExpression)) return reuse();
      if (!LambdaParameters() || !ARROW() || !LambdaBody()) return reject();
      return accept();
    }

  Cache LambdaExpression = new Cache();

  //=====================================================================
  //  LambdaParameters = LPAR LambdaParameterList? RPAR / Identifier ;
  //=====================================================================
  boolean LambdaParameters()
    {
      if (saved("LambdaParameters",LambdaParameters)) return reuse();
      if (LambdaParameters_0() || Identifier()) return accept();
      return reject();
    }

  Cache LambdaParameters = new Cache();

  //-------------------------------------------------------------------
  //  LambdaParameters_0 = LPAR LambdaParameterList? RPAR
  //-------------------------------------------------------------------
  boolean LambdaParameters_0()
    {
      if (saved("LambdaParameters_0",LambdaParameters_0)) return reuseInner();
      if (!LPAR()) return rejectInner();
      LambdaParameterList();
      if (!RPAR()) return rejectInner();
      return acceptInner();
    }

  Cache LambdaParameters_0 = new Cache();

  //=====================================================================
  //  LambdaParameterList = LambdaParameter (COMMA LambdaParameter)* /
  //    Identifier (COMMA Identifier)* ;
  //=====================================================================
  boolean LambdaParameterList()
    {
      if (saved("LambdaParameterList",LambdaParameterList)) return reuse();
      if (LambdaParameterList_0() || LambdaParameterList_3()) return accept();
      return reject();
    }

  Cache LambdaParameterList = new Cache();

  //-------------------------------------------------------------------
  //  LambdaParameterList_0 = LambdaParameter (COMMA LambdaParameter)*
  //-------------------------------------------------------------------
  boolean LambdaParameterList_0()
    {
      if (saved("LambdaParameterList_0",LambdaParameterList_0)) return reuseInner();
      if (!LambdaParameter()) return rejectInner();
      while (LambdaParameterList_2());
      return acceptInner();
    }

  Cache LambdaParameterList_0 = new Cache();

  //-------------------------------------------------------------------
  //  LambdaParameterList_3 = Identifier (COMMA Identifier)*
  //-------------------------------------------------------------------
  boolean LambdaParameterList_3()
    {
      if (saved("LambdaParameterList_3",LambdaParameterList_3)) return reuseInner();
      if (!Identifier()) return rejectInner();
      while (LambdaParameterList_5());
      return acceptInner();
    }

  Cache LambdaParameterList_3 = new Cache();

  //-------------------------------------------------------------------
  //  LambdaParameterList_2 = COMMA LambdaParameter
  //-------------------------------------------------------------------
  boolean LambdaParameterList_2()
    {
      if (saved("LambdaParameterList_2",LambdaParameterList_2)) return reuseInner();
      if (!COMMA() || !LambdaParameter()) return rejectInner();
      return acceptInner();
    }

  Cache LambdaParameterList_2 = new Cache();

  //-------------------------------------------------------------------
  //  LambdaParameterList_5 = COMMA Identifier
  //-------------------------------------------------------------------
  boolean LambdaParameterList_5()
    {
      if (saved("LambdaParameterList_5",LambdaParameterList_5)) return reuseInner();
      if (!COMMA() || !Identifier()) return rejectInner();
      return acceptInner();
    }

  Cache LambdaParameterList_5 = new Cache();

  //=====================================================================
  //  LambdaParameter = VariableModifier* LambdaParameterType
  //    VariableDeclaratorId / VariableArityParameter !COMMA ;
  //=====================================================================
  boolean LambdaParameter()
    {
      if (saved("LambdaParameter",LambdaParameter)) return reuse();
      if (LambdaParameter_0() || FormalParameter_2()) return accept();
      return reject();
    }

  Cache LambdaParameter = new Cache();

  //-------------------------------------------------------------------
  //  LambdaParameter_0 = VariableModifier* LambdaParameterType
  //    VariableDeclaratorId
  //-------------------------------------------------------------------
  boolean LambdaParameter_0()
    {
      if (saved("LambdaParameter_0",LambdaParameter_0)) return reuseInner();
      while (VariableModifier());
      if (!LambdaParameterType() || !VariableDeclaratorId()) return rejectInner();
      return acceptInner();
    }

  Cache LambdaParameter_0 = new Cache();

  //=====================================================================
  //  LambdaParameterType = UnannType / VAR ;
  //=====================================================================
  boolean LambdaParameterType()
    {
      if (saved("LambdaParameterType",LambdaParameterType)) return reuse();
      if (UnannType() || VAR()) return accept();
      return reject();
    }

  Cache LambdaParameterType = new Cache();

  //=====================================================================
  //  LambdaBody = Expression / Block ;
  //=====================================================================
  boolean LambdaBody()
    {
      if (saved("LambdaBody",LambdaBody)) return reuse();
      if (Expression() || Block()) return accept();
      return reject();
    }

  Cache LambdaBody = new Cache();

  //=====================================================================
  //  SwitchExpression = SWITCH LPAR Expression RPAR SwitchBlock ;
  //=====================================================================
  boolean SwitchExpression()
    {
      if (saved("SwitchExpression",SwitchExpression)) return reuse();
      if (!SWITCH() || !LPAR() || !Expression() || !RPAR()) return reject();
      if (!SwitchBlock()) return reject();
      return accept();
    }

  Cache SwitchExpression = new Cache();

  //=======================================================================
  //
  //  Parsing procedures for recursion class Primary
  //
  //=======================================================================
  //=====================================================================
  //  Common entry to recursion class Primary
  //=====================================================================
  boolean $$Primary()
    {
      beginAsc();
      boolean ok =
        Primary$Literal() ||
        Primary$ClassLiteral() ||
        Primary$THIS() ||
        Primary$Primary_0() ||
        Primary$Primary_1() ||
        Primary$ArrayCreationExpression() ||
        Primary$ClassInstanceCreationExpression_1() ||
        Primary$UnqualifiedClassInstanceCreationExpression() ||
        Primary$MethodInvocation_3() ||
        Primary$MethodInvocation_5() ||
        Primary$MethodInvocation_7() ||
        Primary$MethodInvocation_10() ||
        Primary$MethodReference_2() ||
        Primary$MethodReference_4() ||
        Primary$MethodReference_6() ||
        Primary$MethodReference_8() ||
        Primary$MethodReference_10() ||
        Primary$MethodReference_11() ||
        Primary$ArrayOrFieldAccess_4() ||
        Primary$ArrayOrFieldAccess_5() ||
        Primary$ArrayOrFieldAccess_6();
      endAsc();
      return ok;
    }

  //=====================================================================
  //  Enter Primary in recursion class Primary
  //=====================================================================
  boolean Primary()
    {
      if (saved("Primary",Primary)) return reuse();
      if ($$Primary()) return accept();
      return reject();
    }

  Cache Primary = new Cache();

  //=====================================================================
  //  Enter ClassInstanceCreationExpression in recursion class Primary
  //=====================================================================
  boolean ClassInstanceCreationExpression()
    {
      if (saved("ClassInstanceCreationExpression",ClassInstanceCreationExpression)) return reuse();
      if ($$Primary()) return accept();
      return reject();
    }

  Cache ClassInstanceCreationExpression = new Cache();

  //=====================================================================
  //  Enter MethodInvocation in recursion class Primary
  //=====================================================================
  boolean MethodInvocation()
    {
      if (saved("MethodInvocation",MethodInvocation)) return reuse();
      if ($$Primary()) return accept();
      return reject();
    }

  Cache MethodInvocation = new Cache();

  //=====================================================================
  //  Enter ArrayOrFieldAccess in recursion class Primary
  //=====================================================================
  boolean ArrayOrFieldAccess()
    {
      if (saved("ArrayOrFieldAccess",ArrayOrFieldAccess)) return reuse();
      if ($$Primary()) return accept();
      return reject();
    }

  Cache ArrayOrFieldAccess = new Cache();

  //=====================================================================
  //  Ascent from seed Literal via Primary.
  //=====================================================================
  boolean Primary$Literal()
    {
      begin("Primary$Literal","Primary$Literal");
      if (!Literal()) return reject();
      if ($Primary(empty$$)) return accept();
      return reject();
    }

  //=====================================================================
  //  Ascent from seed ClassLiteral via Primary.
  //=====================================================================
  boolean Primary$ClassLiteral()
    {
      begin("Primary$ClassLiteral","Primary$ClassLiteral");
      if (!ClassLiteral()) return reject();
      if ($Primary(empty$$)) return accept();
      return reject();
    }

  //=====================================================================
  //  Ascent from seed THIS via Primary.
  //=====================================================================
  boolean Primary$THIS()
    {
      begin("Primary$THIS","Primary$THIS");
      if (!THIS()) return reject();
      if ($Primary(empty$$)) return accept();
      return reject();
    }

  //=====================================================================
  //  Ascent from seed TypeName DOT THIS via Primary.
  //=====================================================================
  boolean Primary$Primary_0()
    {
      begin("Primary$Primary_0","Primary$Primary_0");
      if (!Primary_0()) return reject();
      if ($Primary(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  Primary_0 = TypeName DOT THIS
  //-------------------------------------------------------------------
  boolean Primary_0()
    {
      if (saved("Primary_0",Primary_0)) return reuseInner();
      if (!TypeName() || !DOT() || !THIS()) return rejectInner();
      return acceptInner();
    }

  Cache Primary_0 = new Cache();

  //=====================================================================
  //  Ascent from seed LPAR Expression RPAR via Primary.
  //=====================================================================
  boolean Primary$Primary_1()
    {
      begin("Primary$Primary_1","Primary$Primary_1");
      if (!Primary_1()) return reject();
      if ($Primary(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  Primary_1 = LPAR Expression RPAR
  //-------------------------------------------------------------------
  boolean Primary_1()
    {
      if (saved("Primary_1",Primary_1)) return reuseInner();
      if (!LPAR() || !Expression() || !RPAR()) return rejectInner();
      return acceptInner();
    }

  Cache Primary_1 = new Cache();

  //=====================================================================
  //  Ascent from seed ArrayCreationExpression via Primary.
  //=====================================================================
  boolean Primary$ArrayCreationExpression()
    {
      begin("Primary$ArrayCreationExpression","Primary$ArrayCreationExpression");
      if (!ArrayCreationExpression()) return reject();
      if ($Primary(empty$$)) return accept();
      return reject();
    }

  //=====================================================================
  //  Ascent from seed Name DOT
  //    UnqualifiedClassInstanceCreationExpression via
  //    ClassInstanceCreationExpression.
  //=====================================================================
  boolean Primary$ClassInstanceCreationExpression_1()
    {
      begin("Primary$ClassInstanceCreationExpression_1","Primary$ClassInstanceCreationExpression_1");
      if (!ClassInstanceCreationExpression_1()) return reject();
      if ($ClassInstanceCreationExpression(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  ClassInstanceCreationExpression_1 = Name DOT
  //    UnqualifiedClassInstanceCreationExpression
  //-------------------------------------------------------------------
  boolean ClassInstanceCreationExpression_1()
    {
      if (saved("ClassInstanceCreationExpression_1",ClassInstanceCreationExpression_1)) return reuseInner();
      if (!Name() || !DOT() || !UnqualifiedClassInstanceCreationExpression()) return rejectInner();
      return acceptInner();
    }

  Cache ClassInstanceCreationExpression_1 = new Cache();

  //=====================================================================
  //  Ascent from seed UnqualifiedClassInstanceCreationExpression via
  //    ClassInstanceCreationExpression.
  //=====================================================================
  boolean Primary$UnqualifiedClassInstanceCreationExpression()
    {
      begin("Primary$UnqualifiedClassInstanceCreationExpression","Primary$UnqualifiedClassInstanceCreationExpression");
      if (!UnqualifiedClassInstanceCreationExpression()) return reject();
      if ($ClassInstanceCreationExpression(empty$$)) return accept();
      return reject();
    }

  //=====================================================================
  //  Ascent from seed Name DOT TypeArguments Identifier LPAR
  //    ArgumentList? RPAR via MethodInvocation.
  //=====================================================================
  boolean Primary$MethodInvocation_3()
    {
      begin("Primary$MethodInvocation_3","Primary$MethodInvocation_3");
      if (!MethodInvocation_3()) return reject();
      if ($MethodInvocation(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  MethodInvocation_3 = Name DOT TypeArguments Identifier LPAR
  //    ArgumentList? RPAR
  //-------------------------------------------------------------------
  boolean MethodInvocation_3()
    {
      if (saved("MethodInvocation_3",MethodInvocation_3)) return reuseInner();
      if (!Name() || !DOT() || !TypeArguments() || !Identifier()) return rejectInner();
      if (!LPAR()) return rejectInner();
      ArgumentList();
      if (!RPAR()) return rejectInner();
      return acceptInner();
    }

  Cache MethodInvocation_3 = new Cache();

  //=====================================================================
  //  Ascent from seed Name LPAR ArgumentList? RPAR via
  //    MethodInvocation.
  //=====================================================================
  boolean Primary$MethodInvocation_5()
    {
      begin("Primary$MethodInvocation_5","Primary$MethodInvocation_5");
      if (!MethodInvocation_5()) return reject();
      if ($MethodInvocation(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  MethodInvocation_5 = Name LPAR ArgumentList? RPAR
  //-------------------------------------------------------------------
  boolean MethodInvocation_5()
    {
      if (saved("MethodInvocation_5",MethodInvocation_5)) return reuseInner();
      if (!Name() || !LPAR()) return rejectInner();
      ArgumentList();
      if (!RPAR()) return rejectInner();
      return acceptInner();
    }

  Cache MethodInvocation_5 = new Cache();

  //=====================================================================
  //  Ascent from seed SUPER DOT TypeArguments? Identifier LPAR
  //    ArgumentList? RPAR via MethodInvocation.
  //=====================================================================
  boolean Primary$MethodInvocation_7()
    {
      begin("Primary$MethodInvocation_7","Primary$MethodInvocation_7");
      if (!MethodInvocation_7()) return reject();
      if ($MethodInvocation(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  MethodInvocation_7 = SUPER DOT TypeArguments? Identifier LPAR
  //    ArgumentList? RPAR
  //-------------------------------------------------------------------
  boolean MethodInvocation_7()
    {
      if (saved("MethodInvocation_7",MethodInvocation_7)) return reuseInner();
      if (!SUPER() || !DOT()) return rejectInner();
      TypeArguments();
      if (!Identifier()) return rejectInner();
      if (!LPAR()) return rejectInner();
      ArgumentList();
      if (!RPAR()) return rejectInner();
      return acceptInner();
    }

  Cache MethodInvocation_7 = new Cache();

  //=====================================================================
  //  Ascent from seed TypeName DOT SUPER DOT TypeArguments? Identifier
  //    LPAR ArgumentList? RPAR via MethodInvocation.
  //=====================================================================
  boolean Primary$MethodInvocation_10()
    {
      begin("Primary$MethodInvocation_10","Primary$MethodInvocation_10");
      if (!MethodInvocation_10()) return reject();
      if ($MethodInvocation(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  MethodInvocation_10 = TypeName DOT SUPER DOT TypeArguments?
  //    Identifier LPAR ArgumentList? RPAR
  //-------------------------------------------------------------------
  boolean MethodInvocation_10()
    {
      if (saved("MethodInvocation_10",MethodInvocation_10)) return reuseInner();
      if (!TypeName() || !DOT() || !SUPER() || !DOT()) return rejectInner();
      TypeArguments();
      if (!Identifier()) return rejectInner();
      if (!LPAR()) return rejectInner();
      ArgumentList();
      if (!RPAR()) return rejectInner();
      return acceptInner();
    }

  Cache MethodInvocation_10 = new Cache();

  //=====================================================================
  //  Ascent from seed Name COLONCOLON TypeArguments? Identifier via
  //    MethodReference.
  //=====================================================================
  boolean Primary$MethodReference_2()
    {
      begin("Primary$MethodReference_2","Primary$MethodReference_2");
      if (!MethodReference_2()) return reject();
      if ($MethodReference(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  MethodReference_2 = Name COLONCOLON TypeArguments? Identifier
  //-------------------------------------------------------------------
  boolean MethodReference_2()
    {
      if (saved("MethodReference_2",MethodReference_2)) return reuseInner();
      if (!Name() || !COLONCOLON()) return rejectInner();
      TypeArguments();
      if (!Identifier()) return rejectInner();
      return acceptInner();
    }

  Cache MethodReference_2 = new Cache();

  //=====================================================================
  //  Ascent from seed ReferenceType COLONCOLON TypeArguments? Identifier
  //    via MethodReference.
  //=====================================================================
  boolean Primary$MethodReference_4()
    {
      begin("Primary$MethodReference_4","Primary$MethodReference_4");
      if (!MethodReference_4()) return reject();
      if ($MethodReference(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  MethodReference_4 = ReferenceType COLONCOLON TypeArguments?
  //    Identifier
  //-------------------------------------------------------------------
  boolean MethodReference_4()
    {
      if (saved("MethodReference_4",MethodReference_4)) return reuseInner();
      if (!ReferenceType() || !COLONCOLON()) return rejectInner();
      TypeArguments();
      if (!Identifier()) return rejectInner();
      return acceptInner();
    }

  Cache MethodReference_4 = new Cache();

  //=====================================================================
  //  Ascent from seed SUPER COLONCOLON TypeArguments? Identifier via
  //    MethodReference.
  //=====================================================================
  boolean Primary$MethodReference_6()
    {
      begin("Primary$MethodReference_6","Primary$MethodReference_6");
      if (!MethodReference_6()) return reject();
      if ($MethodReference(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  MethodReference_6 = SUPER COLONCOLON TypeArguments? Identifier
  //-------------------------------------------------------------------
  boolean MethodReference_6()
    {
      if (saved("MethodReference_6",MethodReference_6)) return reuseInner();
      if (!SUPER() || !COLONCOLON()) return rejectInner();
      TypeArguments();
      if (!Identifier()) return rejectInner();
      return acceptInner();
    }

  Cache MethodReference_6 = new Cache();

  //=====================================================================
  //  Ascent from seed TypeName DOT SUPER COLONCOLON TypeArguments?
  //    Identifier via MethodReference.
  //=====================================================================
  boolean Primary$MethodReference_8()
    {
      begin("Primary$MethodReference_8","Primary$MethodReference_8");
      if (!MethodReference_8()) return reject();
      if ($MethodReference(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  MethodReference_8 = TypeName DOT SUPER COLONCOLON TypeArguments?
  //    Identifier
  //-------------------------------------------------------------------
  boolean MethodReference_8()
    {
      if (saved("MethodReference_8",MethodReference_8)) return reuseInner();
      if (!TypeName() || !DOT() || !SUPER() || !COLONCOLON()) return rejectInner();
      TypeArguments();
      if (!Identifier()) return rejectInner();
      return acceptInner();
    }

  Cache MethodReference_8 = new Cache();

  //=====================================================================
  //  Ascent from seed ArrayType COLONCOLON NEW via MethodReference.
  //=====================================================================
  boolean Primary$MethodReference_10()
    {
      begin("Primary$MethodReference_10","Primary$MethodReference_10");
      if (!MethodReference_10()) return reject();
      if ($MethodReference(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  MethodReference_10 = ArrayType COLONCOLON NEW
  //-------------------------------------------------------------------
  boolean MethodReference_10()
    {
      if (saved("MethodReference_10",MethodReference_10)) return reuseInner();
      if (!ArrayType() || !COLONCOLON() || !NEW()) return rejectInner();
      return acceptInner();
    }

  Cache MethodReference_10 = new Cache();

  //=====================================================================
  //  Ascent from seed ClassType COLONCOLON TypeArguments? NEW via
  //    MethodReference.
  //=====================================================================
  boolean Primary$MethodReference_11()
    {
      begin("Primary$MethodReference_11","Primary$MethodReference_11");
      if (!MethodReference_11()) return reject();
      if ($MethodReference(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  MethodReference_11 = ClassType COLONCOLON TypeArguments? NEW
  //-------------------------------------------------------------------
  boolean MethodReference_11()
    {
      if (saved("MethodReference_11",MethodReference_11)) return reuseInner();
      if (!ClassType() || !COLONCOLON()) return rejectInner();
      TypeArguments();
      if (!NEW()) return rejectInner();
      return acceptInner();
    }

  Cache MethodReference_11 = new Cache();

  //=====================================================================
  //  Ascent from seed Name LBRK Expression RBRK via ArrayOrFieldAccess.
  //=====================================================================
  boolean Primary$ArrayOrFieldAccess_4()
    {
      begin("Primary$ArrayOrFieldAccess_4","Primary$ArrayOrFieldAccess_4");
      if (!ArrayOrFieldAccess_4()) return reject();
      if ($ArrayOrFieldAccess(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  ArrayOrFieldAccess_4 = Name LBRK Expression RBRK
  //-------------------------------------------------------------------
  boolean ArrayOrFieldAccess_4()
    {
      if (saved("ArrayOrFieldAccess_4",ArrayOrFieldAccess_4)) return reuseInner();
      if (!Name() || !LBRK() || !Expression() || !RBRK()) return rejectInner();
      return acceptInner();
    }

  Cache ArrayOrFieldAccess_4 = new Cache();

  //=====================================================================
  //  Ascent from seed SUPER DOT Identifier via ArrayOrFieldAccess.
  //=====================================================================
  boolean Primary$ArrayOrFieldAccess_5()
    {
      begin("Primary$ArrayOrFieldAccess_5","Primary$ArrayOrFieldAccess_5");
      if (!ArrayOrFieldAccess_5()) return reject();
      if ($ArrayOrFieldAccess(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  ArrayOrFieldAccess_5 = SUPER DOT Identifier
  //-------------------------------------------------------------------
  boolean ArrayOrFieldAccess_5()
    {
      if (saved("ArrayOrFieldAccess_5",ArrayOrFieldAccess_5)) return reuseInner();
      if (!SUPER() || !DOT() || !Identifier()) return rejectInner();
      return acceptInner();
    }

  Cache ArrayOrFieldAccess_5 = new Cache();

  //=====================================================================
  //  Ascent from seed TypeName DOT SUPER DOT Identifier via
  //    ArrayOrFieldAccess.
  //=====================================================================
  boolean Primary$ArrayOrFieldAccess_6()
    {
      begin("Primary$ArrayOrFieldAccess_6","Primary$ArrayOrFieldAccess_6");
      if (!ArrayOrFieldAccess_6()) return reject();
      if ($ArrayOrFieldAccess(empty$$)) return accept();
      return reject();
    }

  //-------------------------------------------------------------------
  //  ArrayOrFieldAccess_6 = TypeName DOT SUPER DOT Identifier
  //-------------------------------------------------------------------
  boolean ArrayOrFieldAccess_6()
    {
      if (saved("ArrayOrFieldAccess_6",ArrayOrFieldAccess_6)) return reuseInner();
      if (!TypeName() || !DOT() || !SUPER() || !DOT()) return rejectInner();
      if (!Identifier()) return rejectInner();
      return acceptInner();
    }

  Cache ArrayOrFieldAccess_6 = new Cache();

  //=====================================================================
  //  Ascent from Primary via ClassInstanceCreationExpression_0 or
  //    MethodInvocation_0 or MethodReference_0 or ArrayOrFieldAccess_0.
  //=====================================================================
  boolean $Primary(FuncVV act)
    {
      begin("$Primary","Primary");
      setAction(act);
      if ($ClassInstanceCreationExpression_0() || $MethodInvocation_0() || $MethodReference_0() || $ArrayOrFieldAccess_0()) return accept();
      if (endGrow()) return accept();
      return reject();
    }

  //=====================================================================
  //  Ascent from ClassInstanceCreationExpression via Primary.
  //=====================================================================
  boolean $ClassInstanceCreationExpression(FuncVV act)
    {
      begin("$ClassInstanceCreationExpression","ClassInstanceCreationExpression");
      setAction(act);
      if ($Primary(empty$$) || endGrow()) return accept();
      return reject();
    }

  //=====================================================================
  //  Ascent from MethodInvocation via Primary.
  //=====================================================================
  boolean $MethodInvocation(FuncVV act)
    {
      begin("$MethodInvocation","MethodInvocation");
      setAction(act);
      if ($Primary(empty$$) || endGrow()) return accept();
      return reject();
    }

  //=====================================================================
  //  Ascent from MethodReference via Primary.
  //=====================================================================
  boolean $MethodReference(FuncVV act)
    {
      begin("$MethodReference","MethodReference");
      setAction(act);
      if ($Primary(empty$$)) return accept();
      return reject();
    }

  //=====================================================================
  //  Ascent from ArrayOrFieldAccess via Primary.
  //=====================================================================
  boolean $ArrayOrFieldAccess(FuncVV act)
    {
      begin("$ArrayOrFieldAccess","ArrayOrFieldAccess");
      setAction(act);
      if ($Primary(empty$$) || endGrow()) return accept();
      return reject();
    }

  //=====================================================================
  //  Ascent from ClassInstanceCreationExpression_0 = Primary DOT
  //    UnqualifiedClassInstanceCreationExpression via
  //    ClassInstanceCreationExpression.
  //=====================================================================
  boolean $ClassInstanceCreationExpression_0()
    {
      begin("$ClassInstanceCreationExpression_0","ClassInstanceCreationExpression_0");
      if (!DOT() || !UnqualifiedClassInstanceCreationExpression()) return rejectInner();
      if ($ClassInstanceCreationExpression(empty$$)) return accept();
      return rejectInner();
    }

  //=====================================================================
  //  Ascent from MethodInvocation_0 = Primary DOT TypeArguments?
  //    Identifier LPAR ArgumentList? RPAR via MethodInvocation.
  //=====================================================================
  boolean $MethodInvocation_0()
    {
      begin("$MethodInvocation_0","MethodInvocation_0");
      if (!DOT() || !MethodInvocation_1() || !Identifier() || !LPAR()) return rejectInner();
      if (!MethodInvocation_2()) return rejectInner();
      if (!RPAR()) return rejectInner();
      if ($MethodInvocation(empty$$)) return accept();
      return rejectInner();
    }

  //-------------------------------------------------------------------
  //  MethodInvocation_1 = TypeArguments?
  //-------------------------------------------------------------------
  boolean MethodInvocation_1()
    {
      if (saved("MethodInvocation_1",MethodInvocation_1)) return reuseInner();
      TypeArguments();
      return acceptInner();
    }

  Cache MethodInvocation_1 = new Cache();

  //-------------------------------------------------------------------
  //  MethodInvocation_2 = ArgumentList?
  //-------------------------------------------------------------------
  boolean MethodInvocation_2()
    {
      if (saved("MethodInvocation_2",MethodInvocation_2)) return reuseInner();
      ArgumentList();
      return acceptInner();
    }

  Cache MethodInvocation_2 = new Cache();

  //=====================================================================
  //  Ascent from MethodReference_0 = Primary COLONCOLON TypeArguments?
  //    Identifier via MethodReference.
  //=====================================================================
  boolean $MethodReference_0()
    {
      begin("$MethodReference_0","MethodReference_0");
      if (!COLONCOLON() || !MethodReference_1() || !Identifier()) return rejectInner();
      if ($MethodReference(empty$$)) return accept();
      return rejectInner();
    }

  //-------------------------------------------------------------------
  //  MethodReference_1 = TypeArguments?
  //-------------------------------------------------------------------
  boolean MethodReference_1()
    {
      if (saved("MethodReference_1",MethodReference_1)) return reuseInner();
      TypeArguments();
      return acceptInner();
    }

  Cache MethodReference_1 = new Cache();

  //=====================================================================
  //  Ascent from ArrayOrFieldAccess_0 = Primary (LBRK Expression RBRK /
  //    DOT Identifier) via ArrayOrFieldAccess.
  //=====================================================================
  boolean $ArrayOrFieldAccess_0()
    {
      begin("$ArrayOrFieldAccess_0","ArrayOrFieldAccess_0");
      if (!ArrayOrFieldAccess_1()) return rejectInner();
      if ($ArrayOrFieldAccess(empty$$)) return accept();
      return rejectInner();
    }

  //-------------------------------------------------------------------
  //  ArrayOrFieldAccess_1 = LBRK Expression RBRK / DOT Identifier
  //-------------------------------------------------------------------
  boolean ArrayOrFieldAccess_1()
    {
      if (saved("ArrayOrFieldAccess_1",ArrayOrFieldAccess_1)) return reuseInner();
      if (ArrayOrFieldAccess_2() || ArrayOrFieldAccess_3()) return acceptInner();
      return rejectInner();
    }

  Cache ArrayOrFieldAccess_1 = new Cache();

  //-------------------------------------------------------------------
  //  ArrayOrFieldAccess_2 = LBRK Expression RBRK
  //-------------------------------------------------------------------
  boolean ArrayOrFieldAccess_2()
    {
      if (saved("ArrayOrFieldAccess_2",ArrayOrFieldAccess_2)) return reuseInner();
      if (!LBRK() || !Expression() || !RBRK()) return rejectInner();
      return acceptInner();
    }

  Cache ArrayOrFieldAccess_2 = new Cache();

  //-------------------------------------------------------------------
  //  ArrayOrFieldAccess_3 = DOT Identifier
  //-------------------------------------------------------------------
  boolean ArrayOrFieldAccess_3()
    {
      if (saved("ArrayOrFieldAccess_3",ArrayOrFieldAccess_3)) return reuseInner();
      if (!DOT() || !Identifier()) return rejectInner();
      return acceptInner();
    }

  Cache ArrayOrFieldAccess_3 = new Cache();

  //=======================================================================
  //
  //  Caches
  //
  //=======================================================================

  //-------------------------------------------------------------------
  //  List of Cache objects
  //-------------------------------------------------------------------

  Cache[] cacheList =
  {
    Compilation,SUB,EOT,Spacing,Spacing_1,Spacing_2,Spacing_4,
    Spacing_9,Word,Identifier,TypeIdentifier,TypeIdentifier_2,Letter,
    LetterOrDigit,Reserved,ABSTRACT,ASSERT,BOOLEAN,BREAK,BYTE,CASE,
    CATCH,CHAR,CLASS,CONTINUE,DEFAULT,DOUBLE,DO,ELSE,ENUM,EXTENDS,
    FALSE,FINALLY,FINAL,FLOAT,FOR,IF,IMPLEMENTS,IMPORT,INTERFACE,INT,
    INSTANCEOF,LONG,NATIVE,NEW,NULL,PACKAGE,PRIVATE,PROTECTED,PUBLIC,
    RETURN,SHORT,STATIC,STRICTFP,SUPER,SWITCH,SYNCHRONIZED,THIS,
    THROWS,THROW,TRANSIENT,TRUE,TRY,VOID,VOLATILE,WHILE,OPEN,MODULE,
    REQUIRES,TRANSITIVE,EXPORTS,OPENS,TO,USES,PROVIDES,WITH,VAR,YIELD,
    Literal,IntegerLiteral,DecimalNumeral,DecimalNumeral_1,
    DecimalNumeral_4,HexNumeral,OctalNumeral,OctalNumeral_3,
    BinaryNumeral,BinaryNumeral_6,FloatLiteral,
    DecimalFloatingPointLiteral,DecimalFloatingPointLiteral_0,
    DecimalFloatingPointLiteral_6,DecimalFloatingPointLiteral_11,
    DecimalFloatingPointLiteral_14,Exponent,
    HexadecimalFloatingPointLiteral,HexSignificand,HexSignificand_0,
    HexSignificand_6,HexDigits,HexDigits_2,HexDigit,BinaryExponent,
    Digits,BooleanLiteral,CharLiteral,StringLiteral,StringLiteral_3,
    Escape,OctalEscape,OctalEscape_0,OctalEscape_4,UnicodeEscape,
    NullLiteral,AT,COLONCOLON,COMMA,DOT,ELLIPSIS,LPAR,LBRK,RBRK,RPAR,
    LWING,RWING,SEMI,AND,ANDAND,ANDEQU,ARROW,BANG,BSR,BSREQU,COLON,
    DEC,DIV,DIVEQU,EQU,EQUAL,GE,GT,HAT,HATEQU,INC,LE,LPOINT,LT,MINUS,
    MINUSEQU,MOD,MODEQU,NOTEQUAL,OR,OREQU,OROR,PLUS,PLUSEQU,QUERY,
    RPOINT,SL,SLEQU,SR,SREQU,STAR,STAREQU,TILDE,PrimitiveType,
    PrimitiveType_0,PrimitiveType_2,NumericType,IntegralType,
    FloatingPointType,ReferenceType,ClassType,ClassType_2,ClassType_5,
    ClassType_9,TypeVariable,ArrayType,ArrayType_0,ArrayType_1,
    ArrayType_2,Dims,Dims_3,TypeParameter,TypeParameterModifier,
    TypeBound,TypeBound_0,TypeBound_2,AdditionalBound,TypeArguments,
    TypeArgumentList,TypeArgumentList_2,TypeArgument,Wildcard,
    WildcardBounds,WildcardBounds_0,WildcardBounds_1,Name,Name_2,
    TypeName,TypeName_2,CompilationUnit,OrdinaryCompilationUnit,
    ModularCompilationUnit,PackageDeclaration,PackageModifier,
    ImportDeclaration,SingleTypeImportDeclaration,
    TypeImportOnDemandDeclaration,SingleStaticImportDeclaration,
    StaticImportOnDemandDeclaration,TypeDeclaration,ModuleDeclaration,
    ModuleDirective,ModuleDirective_0,ModuleDirective_2,
    ModuleDirective_7,ModuleDirective_12,ModuleDirective_13,
    ModuleDirective_4,ModuleDirective_15,ModuleDirective_6,
    RequiresModifier,ClassDeclaration,NormalClassDeclaration,
    ClassModifier,TypeParameters,TypeParameterList,
    TypeParameterList_2,Superclass,Superinterfaces,InterfaceTypeList,
    InterfaceTypeList_2,ClassBody,ClassBodyDeclaration,
    ClassMemberDeclaration,FieldDeclaration,VariableDeclaratorList,
    VariableDeclaratorList_2,VariableDeclarator,VariableDeclarator_2,
    VariableDeclaratorId,VariableInitializer,UnannType,
    UnannPrimitiveType,UnannReferenceType,UnannClassType,
    UnannClassType_2,UnannTypeVariable,UnannArrayType,
    UnannArrayType_0,UnannArrayType_1,UnannArrayType_2,FieldModifier,
    MethodDeclaration,MethodHeader,MethodHeader_0,MethodHeader_2,
    MethodDeclarator,FormalParametersWithReceiver,
    FormalParametersWithReceiver_0,FormalParametersWithReceiver_3,
    FormalParametersWithReceiver_2,ReceiverParameter,
    ReceiverParameter_3,FormalParameterList,FormalParameterList_2,
    FormalParameter,FormalParameter_0,FormalParameter_2,
    FormalParameter_3,VariableArityParameter,VariableModifier,
    MethodModifier,Result,Throws,ExceptionTypeList,
    ExceptionTypeList_2,ExceptionType,MethodBody,InstanceInitializer,
    StaticInitializer,ConstructorDeclaration,ConstructorDeclarator,
    SimpleTypeName,ConstructorModifier,ConstructorBody,
    ExplicitConstructorInvocation,ExplicitConstructorInvocation_0,
    ExplicitConstructorInvocation_3,ExplicitConstructorInvocation_6,
    ExplicitConstructorInvocation_9,EnumDeclaration,EnumBody,
    EnumConstantList,EnumConstantList_2,EnumConstant,EnumConstant_3,
    EnumConstantModifier,EnumBodyDeclarations,InterfaceDeclaration,
    NormalInterfaceDeclaration,InterfaceModifier,ExtendsInterfaces,
    InterfaceBody,InterfaceMemberDeclaration,ConstantDeclaration,
    ConstantModifier,InterfaceMethodDeclaration,
    InterfaceMethodModifier,AnnotationTypeDeclaration,
    AnnotationTypeBody,AnnotationTypeMemberDeclaration,
    AnnotationTypeElementDeclaration,AnnotationTypeElementModifier,
    DefaultValue,Annotation,NormalAnnotation,ElementValuePairList,
    ElementValuePairList_2,ElementValuePair,ElementValue,
    ElementValueArrayInitializer,ElementValueList,ElementValueList_2,
    MarkerAnnotation,SingleElementAnnotation,ArrayInitializer,
    VariableInitializerList,VariableInitializerList_2,Block,
    BlockStatements,BlockStatement,LocalVariableDeclarationStatement,
    LocalVariableDeclaration,LocalVariableType,Statement,
    EmptyStatement,LabeledStatement,ExpressionStatement,
    StatementExpression,IfThenStatement,IfThenElseStatement,
    AssertStatement,AssertStatement_0,AssertStatement_1,
    SwitchStatement,SwitchBlock,SwitchBlock_0,SwitchBlock_2,
    SwitchRule,SwitchRule_0,SwitchRule_1,SwitchRule_2,
    SwitchBlockStatementGroup,SwitchBlockStatementGroup_2,SwitchLabel,
    SwitchLabel_0,SwitchLabel_2,CaseConstant,WhileStatement,
    DoStatement,ForStatement,BasicForStatement,ForInit,ForUpdate,
    StatementExpressionList,StatementExpressionList_2,
    EnhancedForStatement,BreakStatement,ContinueStatement,
    ReturnStatement,ThrowStatement,SynchronizedStatement,TryStatement,
    TryStatement_0,TryStatement_2,Catches,CatchClause,
    CatchFormalParameter,CatchType,CatchType_2,Finally,
    TryWithResourcesStatement,ResourceSpecification,ResourceList,
    ResourceList_2,Resource,Resource_0,VariableAccess,YieldStatement,
    Expression,ClassLiteral,ClassLiteral_0,ClassLiteral_3,
    ClassLiteral_6,ClassLiteral_9,ClassLiteral_2,
    UnqualifiedClassInstanceCreationExpression,
    ClassOrInterfaceTypeToInstantiate,
    ClassOrInterfaceTypeToInstantiate_4,TypeArgumentsOrDiamond,
    TypeArgumentsOrDiamond_0,TypeArgumentsOrDiamond_1,
    ArrayCreationExpression,ArrayCreationExpression_0,
    ArrayCreationExpression_2,ArrayCreationExpression_4,
    ArrayCreationExpression_5,DimExprs,DimExpr,ArgumentList,
    ArgumentList_2,FieldAccess,FieldAccess_0,FieldAccess_1,
    FieldAccess_2,PostfixExpression,PostfixExpression_0,
    PostfixExpression_3,PostfixExpression_2,UnaryExpression,
    UnaryExpression_0,UnaryExpression_1,PreIncrementExpression,
    PreDecrementExpression,UnaryExpressionNotPlusMinus,
    UnaryExpressionNotPlusMinus_0,UnaryExpressionNotPlusMinus_1,
    CastExpression,CastExpression_0,CastExpression_2,CastExpression_4,
    InfixExpression,InfixExpression_2,InfixExpression_3,
    InfixExpression_4,InfixOperator,ConditionalExpression,
    ConditionalExpression_0,Assignment,LeftHandSide,LeftHandSide_0,
    AssignmentOperator,LambdaExpression,LambdaParameters,
    LambdaParameters_0,LambdaParameterList,LambdaParameterList_0,
    LambdaParameterList_3,LambdaParameterList_2,LambdaParameterList_5,
    LambdaParameter,LambdaParameter_0,LambdaParameterType,LambdaBody,
    SwitchExpression,Primary,ClassInstanceCreationExpression,
    MethodInvocation,ArrayOrFieldAccess,Primary_0,Primary_1,
    ClassInstanceCreationExpression_1,MethodInvocation_3,
    MethodInvocation_5,MethodInvocation_7,MethodInvocation_10,
    MethodReference_2,MethodReference_4,MethodReference_6,
    MethodReference_8,MethodReference_10,MethodReference_11,
    ArrayOrFieldAccess_4,ArrayOrFieldAccess_5,ArrayOrFieldAccess_6,
    MethodInvocation_1,MethodInvocation_2,MethodReference_1,
    ArrayOrFieldAccess_1,ArrayOrFieldAccess_2,ArrayOrFieldAccess_3
  };
}
