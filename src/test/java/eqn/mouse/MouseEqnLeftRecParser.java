//=========================================================================
//
//  This file was generated by Mouse 2.3 at 2021-06-29 11:46:42 GMT
//  from grammar '/tmp/Mouse-2.3/eq.peg'.
//
//=========================================================================

package eqn.mouse;

import mouse.runtime.Source;

public class MouseEqnLeftRecParser extends mouse.runtime.ParserMemo {
    //=======================================================================
    //
    //  Initialization
    //
    //=======================================================================
    //-------------------------------------------------------------------
    //  Constructor
    //-------------------------------------------------------------------
    public MouseEqnLeftRecParser() {
        sem = null;
        super.sem = sem;
        caches = cacheList;
    }

    //-------------------------------------------------------------------
    //  Run the parser
    //-------------------------------------------------------------------
    public boolean parse(Source src) {
        super.init(src);
        boolean result = Eqn();
        closeParser(result);
        return result;
    }

    //=======================================================================
    //
    //  Parsing procedures
    //
    //=======================================================================
    //=====================================================================
    //  Eqn = Prec0 ;
    //=====================================================================
    boolean Eqn() {
        if (saved("Eqn", Eqn))
            return reuse();
        if (!Prec0())
            return reject();
        return accept();
    }

    Cache Eqn = new Cache();

    //=====================================================================
    //  Prec4 = "(" Prec0 ")" ;
    //=====================================================================
    boolean Prec4() {
        if (saved("Prec4", Prec4))
            return reuse();
        if (!next('(') || !Prec0() || !next(')'))
            return reject();
        return accept();
    }

    Cache Prec4 = new Cache();

    //=====================================================================
    //  Prec3 = [0-9]+ / Prec4 ;
    //=====================================================================
    boolean Prec3() {
        if (saved("Prec3", Prec3))
            return reuse();
        if (Prec3_0() || Prec4())
            return accept();
        return reject();
    }

    Cache Prec3 = new Cache();

    //-------------------------------------------------------------------
    //  Prec3_0 = [0-9]+
    //-------------------------------------------------------------------
    boolean Prec3_0() {
        if (saved("Prec3_0", Prec3_0))
            return reuseInner();
        if (!nextIn('0', '9'))
            return rejectInner();
        while (nextIn('0', '9'))
            ;
        return acceptInner();
    }

    Cache Prec3_0 = new Cache();

    //=====================================================================
    //  Prec2 = "-" Prec3 / Prec3 ;
    //=====================================================================
    boolean Prec2() {
        if (saved("Prec2", Prec2))
            return reuse();
        if (Prec2_0() || Prec3())
            return accept();
        return reject();
    }

    Cache Prec2 = new Cache();

    //-------------------------------------------------------------------
    //  Prec2_0 = "-" Prec3
    //-------------------------------------------------------------------
    boolean Prec2_0() {
        if (saved("Prec2_0", Prec2_0))
            return reuseInner();
        if (!next('-') || !Prec3())
            return rejectInner();
        return acceptInner();
    }

    Cache Prec2_0 = new Cache();

    //=====================================================================
    //  Prec1 = Prec2 ("*" / "/") Prec2 / Prec2 ;
    //=====================================================================
    boolean Prec1() {
        if (saved("Prec1", Prec1))
            return reuse();
        if (Prec1_0() || Prec2())
            return accept();
        return reject();
    }

    Cache Prec1 = new Cache();

    //-------------------------------------------------------------------
    //  Prec1_0 = Prec2 ("*" / "/") Prec2
    //-------------------------------------------------------------------
    boolean Prec1_0() {
        if (saved("Prec1_0", Prec1_0))
            return reuseInner();
        if (!Prec2() || (!next('*') && !next('/')) || !Prec2())
            return rejectInner();
        return acceptInner();
    }

    Cache Prec1_0 = new Cache();

    //=====================================================================
    //  Prec0 = Prec1 ("+" / "-") Prec1 / Prec1 ;
    //=====================================================================
    boolean Prec0() {
        if (saved("Prec0", Prec0))
            return reuse();
        if (Prec0_0() || Prec1())
            return accept();
        return reject();
    }

    Cache Prec0 = new Cache();

    //-------------------------------------------------------------------
    //  Prec0_0 = Prec1 ("+" / "-") Prec1
    //-------------------------------------------------------------------
    boolean Prec0_0() {
        if (saved("Prec0_0", Prec0_0))
            return reuseInner();
        if (!Prec1() || (!next('+') && !next('-')) || !Prec1())
            return rejectInner();
        return acceptInner();
    }

    Cache Prec0_0 = new Cache();

    //=======================================================================
    //
    //  Caches
    //
    //=======================================================================

    //-------------------------------------------------------------------
    //  List of Cache objects
    //-------------------------------------------------------------------

    Cache[] cacheList = { Eqn, Prec4, Prec3, Prec3_0, Prec2, Prec2_0, Prec1, Prec1_0, Prec0, Prec0_0 };
}
